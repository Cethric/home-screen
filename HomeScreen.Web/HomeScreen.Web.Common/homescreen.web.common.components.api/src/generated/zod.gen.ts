// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';
import { DateTime } from 'luxon';

export const zConfig = z.object({
    otlpConfig: z.object({
        endpoint: z.string().min(1),
        headers: z.string().min(1),
        attributes: z.string().min(1),
    }),
    rumConfig: z.object({
        endpoint: z.string().min(1),
        clientToken: z.string().min(1),
        organizationIdentifier: z.string().min(1),
        insecureHttp: z.boolean(),
    }),
});

export const zOtlpConfig = z.object({
    endpoint: z.string().min(1),
    headers: z.string().min(1),
    attributes: z.string().min(1),
});

export const zRumConfig = z.object({
    endpoint: z.string().min(1),
    clientToken: z.string().min(1),
    organizationIdentifier: z.string().min(1),
    insecureHttp: z.boolean(),
});

export const zMediaItem = z.object({
    id: z.string().optional(),
    created: z
        .string()
        .datetime({
            offset: true,
        })
        .refine((value: string) => DateTime.fromISO(value, {}))
        .optional(),
    notes: z.string().optional(),
    enabled: z.boolean().optional(),
    location: z
        .object({
            name: z.string().optional(),
            latitude: z.number().optional(),
            longitude: z.number().optional(),
        })
        .optional(),
    aspectRatio: z.number().optional(),
    portrait: z.boolean().optional(),
    baseB: z.number().int().optional(),
    baseG: z.number().int().optional(),
    baseR: z.number().int().optional(),
});

export const zMediaItemLocation = z.object({
    name: z.string().optional(),
    latitude: z.number().optional(),
    longitude: z.number().optional(),
});

export const zPaginatedMediaItem = z.object({
    mediaItem: zMediaItem.optional(),
    totalPages: z.number().int(),
});

export const zMediaTransformOptionsFormat = z.enum([
    'Jpeg',
    'JpegXl',
    'Png',
    'WebP',
    'Avif',
]);

export const zAcceptedTransformMediaItem = z.object({
    mediaId: z.string().optional(),
    width: z.number().int().optional(),
    height: z.number().int().optional(),
    blur: z.boolean().optional(),
    format: zMediaTransformOptionsFormat.optional(),
    url: z.string().optional(),
});

export const zAcceptedTransformMediaLine = z.object({});

export const zWeatherForecast = z.object({
    feelsLikeTemperature: z.number().optional(),
    maxTemperature: z.number().optional(),
    minTemperature: z.number().optional(),
    chanceOfRain: z.number().optional(),
    amountOfRain: z.number().optional(),
    weatherCode: z.string().optional(),
});

export const zHourlyForecast = z.object({
    time: z
        .string()
        .datetime({
            offset: true,
        })
        .refine((value: string) => DateTime.fromISO(value, {}))
        .optional(),
    apparentTemperature: z.number().optional(),
    precipitation: z.number().optional(),
    precipitationProbability: z.number().optional(),
    windDirection: z.number().optional(),
    windSpeed: z.number().optional(),
    windGusts: z.number().optional(),
    isDay: z.boolean().optional(),
    cloudCover: z.number().optional(),
});

export const zDailyForecast = z.object({
    time: z.string().date().optional(),
    apparentTemperatureMin: z.number().optional(),
    apparentTemperatureMax: z.number().optional(),
    daylightDuration: z.number().optional(),
    sunrise: z
        .string()
        .datetime({
            offset: true,
        })
        .refine((value: string) => DateTime.fromISO(value, {}))
        .optional(),
    sunset: z
        .string()
        .datetime({
            offset: true,
        })
        .refine((value: string) => DateTime.fromISO(value, {}))
        .optional(),
    uvIndexClearSkyMax: z.number().optional(),
    uvIndexMax: z.number().optional(),
    weatherCode: z
        .enum([
            'Clear',
            'MostlyClear',
            'PartlyClear',
            'Overcast',
            'Fog',
            'RimeFog',
            'LightDrizzle',
            'MediumDrizzle',
            'HeavyDrizzle',
            'LightFreezingDrizzle',
            'HeavyFreezingDrizzle',
            'LightRain',
            'MediumRain',
            'HeavyRain',
            'LightFreezingRain',
            'HeavyFreezingRain',
            'LightSnow',
            'MediumSnow',
            'HeavySnow',
            'GrainySnow',
            'LightRainShower',
            'MediumRainShower',
            'HeavyRainShower',
            'LightSnowShower',
            'HeavySnowShower',
            'Thunderstorm',
            'ThunderstormWithSomeRain',
            'ThunderstormWithHeavyRain',
        ])
        .optional(),
    weatherCodeLabel: z.string().optional(),
    precipitationSum: z.number().optional(),
    precipitationProbabilityMax: z.number().optional(),
    precipitationProbabilityMin: z.number().optional(),
});

export const zWmoWeatherCode = z.enum([
    'Clear',
    'MostlyClear',
    'PartlyClear',
    'Overcast',
    'Fog',
    'RimeFog',
    'LightDrizzle',
    'MediumDrizzle',
    'HeavyDrizzle',
    'LightFreezingDrizzle',
    'HeavyFreezingDrizzle',
    'LightRain',
    'MediumRain',
    'HeavyRain',
    'LightFreezingRain',
    'HeavyFreezingRain',
    'LightSnow',
    'MediumSnow',
    'HeavySnow',
    'GrainySnow',
    'LightRainShower',
    'MediumRainShower',
    'HeavyRainShower',
    'LightSnowShower',
    'HeavySnowShower',
    'Thunderstorm',
    'ThunderstormWithSomeRain',
    'ThunderstormWithHeavyRain',
]);

export const zConfigResponse = zConfig;

export const zMediaGetResponse = zMediaItem;

export const zMediaAllResponse = z.array(zPaginatedMediaItem);

export const zMediaPatchResponse = zMediaItem;

export const zMediaGet4Response = zAcceptedTransformMediaItem;

export const zMediaGet5Response = zAcceptedTransformMediaLine;

export const zWeatherResponse = zWeatherForecast;

export const zWeatherAllResponse = z.array(zHourlyForecast);

export const zWeatherAll2Response = z.array(zDailyForecast);
