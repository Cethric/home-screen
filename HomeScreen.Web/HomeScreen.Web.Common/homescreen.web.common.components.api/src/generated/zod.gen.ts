// This file is auto-generated by @hey-api/openapi-ts

import { DateTime } from 'luxon';
import { z } from 'zod';

console.log('zod', z);

export const zConfig = z.object({});

export const zMediaItemLocation = z.object({
  name: z.string().optional(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
});

export const zMediaItem = z.object({
  id: z.string().optional(),
  created: z.iso
    .datetime({
      offset: true,
    })
    .refine((d) => DateTime.fromISO(d))
    .optional(),
  notes: z.string().optional(),
  enabled: z.boolean().optional(),
  location: zMediaItemLocation.optional(),
  aspectRatio: z.number().optional(),
  portrait: z.boolean().optional(),
  baseB: z.number().int().optional(),
  baseG: z.number().int().optional(),
  baseR: z.number().int().optional(),
});

export const zPaginatedMediaItem = z.object({
  mediaItem: zMediaItem.optional(),
  totalPages: z.number().int(),
});

export const zMediaTransformOptionsFormat = z.enum(['Jpeg', 'JpegXl', 'Png', 'WebP', 'Avif']);

export const zAcceptedTransformMediaItem = z.object({
  mediaId: z.string().optional(),
  width: z.number().int().optional(),
  height: z.number().int().optional(),
  blur: z.boolean().optional(),
  format: zMediaTransformOptionsFormat.optional(),
  url: z.string().optional(),
});

export const zAcceptedTransformMediaLine = z.object({});

export const zWeatherForecast = z.object({
  feelsLikeTemperature: z.number().optional(),
  maxTemperature: z.number().optional(),
  minTemperature: z.number().optional(),
  chanceOfRain: z.number().optional(),
  amountOfRain: z.number().optional(),
  weatherCode: z.string().optional(),
});

export const zHourlyForecast = z.object({
  time: z.iso
    .datetime({
      offset: true,
    })
    .refine((d) => DateTime.fromISO(d))
    .optional(),
  apparentTemperature: z.number().optional(),
  precipitation: z.number().optional(),
  precipitationProbability: z.number().optional(),
  windDirection: z.number().optional(),
  windSpeed: z.number().optional(),
  windGusts: z.number().optional(),
  isDay: z.boolean().optional(),
  cloudCover: z.number().optional(),
});

export const zWmoWeatherCode = z.enum([
  'Clear',
  'MostlyClear',
  'PartlyClear',
  'Overcast',
  'Fog',
  'RimeFog',
  'LightDrizzle',
  'MediumDrizzle',
  'HeavyDrizzle',
  'LightFreezingDrizzle',
  'HeavyFreezingDrizzle',
  'LightRain',
  'MediumRain',
  'HeavyRain',
  'LightFreezingRain',
  'HeavyFreezingRain',
  'LightSnow',
  'MediumSnow',
  'HeavySnow',
  'GrainySnow',
  'LightRainShower',
  'MediumRainShower',
  'HeavyRainShower',
  'LightSnowShower',
  'HeavySnowShower',
  'Thunderstorm',
  'ThunderstormWithSomeRain',
  'ThunderstormWithHeavyRain',
]);

export const zDailyForecast = z.object({
  time: z.iso.time({}).optional(),
  apparentTemperatureMin: z.number().optional(),
  apparentTemperatureMax: z.number().optional(),
  daylightDuration: z.number().optional(),
  sunrise: z.iso
    .datetime({
      offset: true,
    })
    .refine((d) => DateTime.fromISO(d))
    .optional(),
  sunset: z.iso
    .datetime({
      offset: true,
    })
    .refine((d) => DateTime.fromISO(d))
    .optional(),
  uvIndexClearSkyMax: z.number().optional(),
  uvIndexMax: z.number().optional(),
  weatherCode: zWmoWeatherCode.optional(),
  weatherCodeLabel: z.string().optional(),
  precipitationSum: z.number().optional(),
  precipitationProbabilityMax: z.number().optional(),
  precipitationProbabilityMin: z.number().optional(),
});

export const zConfigData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zConfigResponse = zConfig;

export const zMediaGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.object({
    count: z.number().int(),
  }),
});

export const zMediaGetResponse = zMediaItem;

export const zMediaAllData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.object({
    offset: z.number().int(),
    length: z.number().int(),
  }),
});

export const zMediaAllResponse = z.array(zPaginatedMediaItem);

export const zMediaPatchData = z.object({
  body: z.never().optional(),
  path: z.object({
    mediaId: z.string(),
  }),
  query: z.object({
    enabled: z.boolean(),
  }),
});

export const zMediaPatchResponse = zMediaItem;

export const zMediaGet2Data = z.object({
  body: z.never().optional(),
  path: z.object({
    mediaId: z.string(),
    width: z.number().int(),
    height: z.number().int(),
  }),
  query: z.object({
    blur: z.boolean(),
    format: zMediaTransformOptionsFormat,
  }),
});

export const zMediaGet3Data = z.object({
  body: z.never().optional(),
  path: z.object({
    direction: z.number().int(),
    size: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zMediaGet4Data = z.object({
  body: z.never().optional(),
  path: z.object({
    mediaId: z.string(),
    width: z.number().int(),
    height: z.number().int(),
  }),
  query: z.object({
    blur: z.boolean(),
    format: zMediaTransformOptionsFormat,
  }),
});

export const zMediaGet4Response = zAcceptedTransformMediaItem;

export const zMediaGet5Data = z.object({
  body: z.never().optional(),
  path: z.object({
    direction: z.number().int(),
    size: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zMediaGet5Response = zAcceptedTransformMediaLine;

export const zWeatherData = z.object({
  body: z.never().optional(),
  path: z.object({
    longitude: z.number(),
    latitude: z.number(),
  }),
  query: z.never().optional(),
});

export const zWeatherResponse = zWeatherForecast;

export const zWeatherAllData = z.object({
  body: z.never().optional(),
  path: z.object({
    longitude: z.number(),
    latitude: z.number(),
  }),
  query: z.never().optional(),
});

export const zWeatherAllResponse = z.array(zHourlyForecast);

export const zWeatherAll2Data = z.object({
  body: z.never().optional(),
  path: z.object({
    longitude: z.number(),
    latitude: z.number(),
  }),
  query: z.never().optional(),
});

export const zWeatherAll2Response = z.array(zDailyForecast);
