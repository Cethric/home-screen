// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zConfig = z.record(z.string(), z.never());

export type ConfigZodType = z.infer<typeof zConfig>;

export const zMediaItemLocation = z.object({
  name: z.optional(z.string()),
  latitude: z.optional(z.number()),
  longitude: z.optional(z.number()),
});

export type MediaItemLocationZodType = z.infer<typeof zMediaItemLocation>;

export const zMediaItem = z.object({
  id: z.optional(z.string()),
  created: z.optional(
    z.iso.datetime({
      offset: true,
    }),
  ),
  notes: z.optional(z.string()),
  enabled: z.optional(z.boolean()),
  location: z.optional(zMediaItemLocation),
  aspectRatio: z.optional(z.number()),
  portrait: z.optional(z.boolean()),
  baseB: z.optional(z.int()),
  baseG: z.optional(z.int()),
  baseR: z.optional(z.int()),
});

export type MediaItemZodType = z.infer<typeof zMediaItem>;

export const zPaginatedMediaItem = z.object({
  mediaItem: z.optional(zMediaItem),
  totalPages: z.int(),
});

export type PaginatedMediaItemZodType = z.infer<typeof zPaginatedMediaItem>;

export const zMediaTransformOptionsFormat = z.enum(['Jpeg', 'JpegXl', 'Png', 'WebP', 'Avif']);

export type MediaTransformOptionsFormatZodType = z.infer<typeof zMediaTransformOptionsFormat>;

export const zAcceptedTransformMediaItem = z.object({
  mediaId: z.optional(z.string()),
  width: z.optional(z.int()),
  height: z.optional(z.int()),
  blur: z.optional(z.boolean()),
  format: z.optional(zMediaTransformOptionsFormat),
  url: z.optional(z.string()),
});

export type AcceptedTransformMediaItemZodType = z.infer<typeof zAcceptedTransformMediaItem>;

export const zAcceptedTransformMediaLine = z.record(z.string(), z.never());

export type AcceptedTransformMediaLineZodType = z.infer<typeof zAcceptedTransformMediaLine>;

export const zWeatherForecast = z.object({
  feelsLikeTemperature: z.optional(z.number()),
  maxTemperature: z.optional(z.number()),
  minTemperature: z.optional(z.number()),
  chanceOfRain: z.optional(z.number()),
  amountOfRain: z.optional(z.number()),
  weatherCode: z.optional(z.string()),
});

export type WeatherForecastZodType = z.infer<typeof zWeatherForecast>;

export const zHourlyForecast = z.object({
  time: z.optional(
    z.iso.datetime({
      offset: true,
    }),
  ),
  apparentTemperature: z.optional(z.number()),
  precipitation: z.optional(z.number()),
  precipitationProbability: z.optional(z.number()),
  windDirection: z.optional(z.number()),
  windSpeed: z.optional(z.number()),
  windGusts: z.optional(z.number()),
  isDay: z.optional(z.boolean()),
  cloudCover: z.optional(z.number()),
});

export type HourlyForecastZodType = z.infer<typeof zHourlyForecast>;

export const zWmoWeatherCode = z.enum([
  'Clear',
  'MostlyClear',
  'PartlyClear',
  'Overcast',
  'Fog',
  'RimeFog',
  'LightDrizzle',
  'MediumDrizzle',
  'HeavyDrizzle',
  'LightFreezingDrizzle',
  'HeavyFreezingDrizzle',
  'LightRain',
  'MediumRain',
  'HeavyRain',
  'LightFreezingRain',
  'HeavyFreezingRain',
  'LightSnow',
  'MediumSnow',
  'HeavySnow',
  'GrainySnow',
  'LightRainShower',
  'MediumRainShower',
  'HeavyRainShower',
  'LightSnowShower',
  'HeavySnowShower',
  'Thunderstorm',
  'ThunderstormWithSomeRain',
  'ThunderstormWithHeavyRain',
]);

export type WmoWeatherCodeZodType = z.infer<typeof zWmoWeatherCode>;

export const zDailyForecast = z.object({
  time: z.optional(z.iso.date()),
  apparentTemperatureMin: z.optional(z.number()),
  apparentTemperatureMax: z.optional(z.number()),
  daylightDuration: z.optional(z.number()),
  sunrise: z.optional(
    z.iso.datetime({
      offset: true,
    }),
  ),
  sunset: z.optional(
    z.iso.datetime({
      offset: true,
    }),
  ),
  uvIndexClearSkyMax: z.optional(z.number()),
  uvIndexMax: z.optional(z.number()),
  weatherCode: z.optional(zWmoWeatherCode),
  weatherCodeLabel: z.optional(z.string()),
  precipitationSum: z.optional(z.number()),
  precipitationProbabilityMax: z.optional(z.number()),
  precipitationProbabilityMin: z.optional(z.number()),
});

export type DailyForecastZodType = z.infer<typeof zDailyForecast>;

export const zConfigData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export type ConfigDataZodType = z.infer<typeof zConfigData>;

export const zConfigResponse = zConfig;

export type ConfigResponseZodType = z.infer<typeof zConfigResponse>;

export const zMediaGetData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    count: z.int(),
  }),
});

export type MediaGetDataZodType = z.infer<typeof zMediaGetData>;

export const zMediaGetResponse = zMediaItem;

export type MediaGetResponseZodType = z.infer<typeof zMediaGetResponse>;

export const zMediaAllData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    offset: z.int(),
    length: z.int(),
  }),
});

export type MediaAllDataZodType = z.infer<typeof zMediaAllData>;

export const zMediaAllResponse = z.array(zPaginatedMediaItem);

export type MediaAllResponseZodType = z.infer<typeof zMediaAllResponse>;

export const zMediaPatchData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    mediaId: z.string(),
  }),
  query: z.object({
    enabled: z.boolean(),
  }),
});

export type MediaPatchDataZodType = z.infer<typeof zMediaPatchData>;

export const zMediaPatchResponse = zMediaItem;

export type MediaPatchResponseZodType = z.infer<typeof zMediaPatchResponse>;

export const zMediaGet2Data = z.object({
  body: z.optional(z.never()),
  path: z.object({
    mediaId: z.string(),
    width: z.int(),
    height: z.int(),
  }),
  query: z.object({
    blur: z.boolean(),
    format: zMediaTransformOptionsFormat,
  }),
});

export type MediaGet2DataZodType = z.infer<typeof zMediaGet2Data>;

export const zMediaGet3Data = z.object({
  body: z.optional(z.never()),
  path: z.object({
    direction: z.int(),
    size: z.int(),
  }),
  query: z.optional(z.never()),
});

export type MediaGet3DataZodType = z.infer<typeof zMediaGet3Data>;

export const zMediaGet4Data = z.object({
  body: z.optional(z.never()),
  path: z.object({
    mediaId: z.string(),
    width: z.int(),
    height: z.int(),
  }),
  query: z.object({
    blur: z.boolean(),
    format: zMediaTransformOptionsFormat,
  }),
});

export type MediaGet4DataZodType = z.infer<typeof zMediaGet4Data>;

export const zMediaGet4Response = zAcceptedTransformMediaItem;

export type MediaGet4ResponseZodType = z.infer<typeof zMediaGet4Response>;

export const zMediaGet5Data = z.object({
  body: z.optional(z.never()),
  path: z.object({
    direction: z.int(),
    size: z.int(),
  }),
  query: z.optional(z.never()),
});

export type MediaGet5DataZodType = z.infer<typeof zMediaGet5Data>;

export const zMediaGet5Response = zAcceptedTransformMediaLine;

export type MediaGet5ResponseZodType = z.infer<typeof zMediaGet5Response>;

export const zWeatherData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    longitude: z.number(),
    latitude: z.number(),
  }),
  query: z.optional(z.never()),
});

export type WeatherDataZodType = z.infer<typeof zWeatherData>;

export const zWeatherResponse = zWeatherForecast;

export type WeatherResponseZodType = z.infer<typeof zWeatherResponse>;

export const zWeatherAllData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    longitude: z.number(),
    latitude: z.number(),
  }),
  query: z.optional(z.never()),
});

export type WeatherAllDataZodType = z.infer<typeof zWeatherAllData>;

export const zWeatherAllResponse = z.array(zHourlyForecast);

export type WeatherAllResponseZodType = z.infer<typeof zWeatherAllResponse>;

export const zWeatherAll2Data = z.object({
  body: z.optional(z.never()),
  path: z.object({
    longitude: z.number(),
    latitude: z.number(),
  }),
  query: z.optional(z.never()),
});

export type WeatherAll2DataZodType = z.infer<typeof zWeatherAll2Data>;

export const zWeatherAll2Response = z.array(zDailyForecast);

export type WeatherAll2ResponseZodType = z.infer<typeof zWeatherAll2Response>;
