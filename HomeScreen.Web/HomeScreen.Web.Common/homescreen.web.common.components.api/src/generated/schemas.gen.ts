// This file is auto-generated by @hey-api/openapi-ts

export const ConfigSchema = {
  type: 'object',
  additionalProperties: false,
  required: ['otlpConfig', 'rumConfig'],
  properties: {
    otlpConfig: {
      $ref: '#/components/schemas/OtlpConfig',
    },
    rumConfig: {
      $ref: '#/components/schemas/RumConfig',
    },
  },
} as const;

export const OtlpConfigSchema = {
  type: 'object',
  additionalProperties: false,
  required: ['endpoint', 'headers', 'attributes'],
  properties: {
    endpoint: {
      type: 'string',
      minLength: 1,
    },
    headers: {
      type: 'string',
      minLength: 1,
    },
    attributes: {
      type: 'string',
      minLength: 1,
    },
  },
} as const;

export const RumConfigSchema = {
  type: 'object',
  additionalProperties: false,
  required: [
    'endpoint',
    'clientToken',
    'organizationIdentifier',
    'insecureHttp',
  ],
  properties: {
    endpoint: {
      type: 'string',
      minLength: 1,
    },
    clientToken: {
      type: 'string',
      minLength: 1,
    },
    organizationIdentifier: {
      type: 'string',
      minLength: 1,
    },
    insecureHttp: {
      type: 'boolean',
    },
  },
} as const;

export const MediaItemSchema = {
  type: 'object',
  additionalProperties: false,
  properties: {
    id: {
      type: 'string',
      format: 'guid',
    },
    created: {
      type: 'string',
      format: 'date-time',
    },
    notes: {
      type: 'string',
    },
    enabled: {
      type: 'boolean',
    },
    location: {
      $ref: '#/components/schemas/MediaItemLocation',
    },
    aspectRatioWidth: {
      type: 'number',
      format: 'double',
    },
    aspectRatioHeight: {
      type: 'number',
      format: 'double',
    },
    baseB: {
      type: 'integer',
    },
    baseG: {
      type: 'integer',
    },
    baseR: {
      type: 'integer',
    },
  },
} as const;

export const MediaItemLocationSchema = {
  type: 'object',
  additionalProperties: false,
  properties: {
    name: {
      type: 'string',
    },
    latitude: {
      type: 'number',
      format: 'double',
    },
    longitude: {
      type: 'number',
      format: 'double',
    },
  },
} as const;

export const PaginatedMediaItemSchema = {
  type: 'object',
  additionalProperties: false,
  required: ['totalPages'],
  properties: {
    mediaItem: {
      $ref: '#/components/schemas/MediaItem',
    },
    totalPages: {
      type: 'integer',
      format: 'uint64',
    },
  },
} as const;

export const MediaTransformOptionsFormatSchema = {
  type: 'string',
  description: '',
  'x-enumNames': ['Jpeg', 'JpegXl', 'Png', 'WebP', 'Avif'],
  enum: ['Jpeg', 'JpegXl', 'Png', 'WebP', 'Avif'],
} as const;

export const AcceptedTransformMediaItemSchema = {
  type: 'object',
  additionalProperties: false,
  properties: {
    mediaId: {
      type: 'string',
      format: 'guid',
    },
    width: {
      type: 'integer',
    },
    height: {
      type: 'integer',
    },
    blur: {
      type: 'boolean',
    },
    format: {
      $ref: '#/components/schemas/MediaTransformOptionsFormat',
    },
    url: {
      type: 'string',
    },
  },
} as const;

export const AcceptedTransformMediaLineSchema = {
  type: 'object',
  additionalProperties: false,
} as const;

export const WeatherForecastSchema = {
  type: 'object',
  additionalProperties: false,
  properties: {
    feelsLikeTemperature: {
      type: 'number',
      format: 'float',
    },
    maxTemperature: {
      type: 'number',
      format: 'float',
    },
    minTemperature: {
      type: 'number',
      format: 'float',
    },
    chanceOfRain: {
      type: 'number',
      format: 'float',
    },
    amountOfRain: {
      type: 'number',
      format: 'float',
    },
    weatherCode: {
      type: 'string',
    },
  },
} as const;

export const HourlyForecastSchema = {
  type: 'object',
  additionalProperties: false,
  properties: {
    time: {
      type: 'string',
      format: 'date-time',
    },
    apparentTemperature: {
      type: 'number',
      format: 'float',
    },
    precipitation: {
      type: 'number',
      format: 'float',
    },
    precipitationProbability: {
      type: 'number',
      format: 'float',
    },
    windDirection: {
      type: 'number',
      format: 'float',
    },
    windSpeed: {
      type: 'number',
      format: 'float',
    },
    windGusts: {
      type: 'number',
      format: 'float',
    },
    isDay: {
      type: 'boolean',
    },
    cloudCover: {
      type: 'number',
      format: 'float',
    },
  },
} as const;

export const DailyForecastSchema = {
  type: 'object',
  additionalProperties: false,
  properties: {
    time: {
      type: 'string',
      format: 'date',
    },
    apparentTemperatureMin: {
      type: 'number',
      format: 'float',
    },
    apparentTemperatureMax: {
      type: 'number',
      format: 'float',
    },
    daylightDuration: {
      type: 'number',
      format: 'float',
    },
    sunrise: {
      type: 'string',
      format: 'date-time',
    },
    sunset: {
      type: 'string',
      format: 'date-time',
    },
    uvIndexClearSkyMax: {
      type: 'number',
      format: 'float',
    },
    uvIndexMax: {
      type: 'number',
      format: 'float',
    },
    weatherCode: {
      $ref: '#/components/schemas/WmoWeatherCode',
    },
    weatherCodeLabel: {
      type: 'string',
    },
    precipitationSum: {
      type: 'number',
      format: 'float',
    },
    precipitationProbabilityMax: {
      type: 'number',
      format: 'float',
    },
    precipitationProbabilityMin: {
      type: 'number',
      format: 'float',
    },
  },
} as const;

export const WmoWeatherCodeSchema = {
  type: 'string',
  description: '',
  'x-enumNames': [
    'Clear',
    'MostlyClear',
    'PartlyClear',
    'Overcast',
    'Fog',
    'RimeFog',
    'LightDrizzle',
    'MediumDrizzle',
    'HeavyDrizzle',
    'LightFreezingDrizzle',
    'HeavyFreezingDrizzle',
    'LightRain',
    'MediumRain',
    'HeavyRain',
    'LightFreezingRain',
    'HeavyFreezingRain',
    'LightSnow',
    'MediumSnow',
    'HeavySnow',
    'GrainySnow',
    'LightRainShower',
    'MediumRainShower',
    'HeavyRainShower',
    'LightSnowShower',
    'HeavySnowShower',
    'Thunderstorm',
    'ThunderstormWithSomeRain',
    'ThunderstormWithHeavyRain',
  ],
  enum: [
    'Clear',
    'MostlyClear',
    'PartlyClear',
    'Overcast',
    'Fog',
    'RimeFog',
    'LightDrizzle',
    'MediumDrizzle',
    'HeavyDrizzle',
    'LightFreezingDrizzle',
    'HeavyFreezingDrizzle',
    'LightRain',
    'MediumRain',
    'HeavyRain',
    'LightFreezingRain',
    'HeavyFreezingRain',
    'LightSnow',
    'MediumSnow',
    'HeavySnow',
    'GrainySnow',
    'LightRainShower',
    'MediumRainShower',
    'HeavyRainShower',
    'LightSnowShower',
    'HeavySnowShower',
    'Thunderstorm',
    'ThunderstormWithSomeRain',
    'ThunderstormWithHeavyRain',
  ],
} as const;
