// This file is auto-generated by @hey-api/openapi-ts

import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from '@hey-api/client-fetch';
import type {
  ConfigData,
  ConfigResponse,
  MediaAllData,
  MediaAllResponse,
  MediaGet2Data,
  MediaGet3Data,
  MediaGet4Data,
  MediaGet4Response,
  MediaGet5Data,
  MediaGet5Response,
  MediaGetData,
  MediaGetResponse,
  MediaPatchData,
  MediaPatchResponse,
  WeatherAll2Data,
  WeatherAll2Response,
  WeatherAllData,
  WeatherAllResponse,
  WeatherData,
  WeatherResponse,
} from './types.gen';
import {
  zConfigResponse,
  zMediaAllResponse,
  zMediaGet4Response,
  zMediaGet5Response,
  zMediaGetResponse,
  zMediaPatchResponse,
  zWeatherAll2Response,
  zWeatherAllResponse,
  zWeatherResponse,
} from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
};

export const config = <ThrowOnError extends boolean = false>(
  options?: Options<ConfigData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ConfigResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zConfigResponse.parseAsync(data);
    },
    url: '/api/config',
    ...options,
  });
};

export const mediaGet = <ThrowOnError extends boolean = false>(
  options: Options<MediaGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    MediaGetResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zMediaGetResponse.parseAsync(data);
    },
    url: '/api/media/random',
    ...options,
  });
};

export const mediaAll = <ThrowOnError extends boolean = false>(
  options: Options<MediaAllData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    MediaAllResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zMediaAllResponse.parseAsync(data);
    },
    url: '/api/media/paginate',
    ...options,
  });
};

export const mediaPatch = <ThrowOnError extends boolean = false>(
  options: Options<MediaPatchData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    MediaPatchResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zMediaPatchResponse.parseAsync(data);
    },
    url: '/api/media/item/{mediaId}/toggle',
    ...options,
  });
};

export const mediaGet2 = <ThrowOnError extends boolean = false>(
  options: Options<MediaGet2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/api/media/download/item/{mediaId}/{width}/{height}',
    ...options,
  });
};

export const mediaGet3 = <ThrowOnError extends boolean = false>(
  options: Options<MediaGet3Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/api/media/download/line/{direction}/{size}',
    ...options,
  });
};

export const mediaGet4 = <ThrowOnError extends boolean = false>(
  options: Options<MediaGet4Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    MediaGet4Response,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zMediaGet4Response.parseAsync(data);
    },
    url: '/api/media/transform/item/{mediaId}/{width}/{height}',
    ...options,
  });
};

export const mediaGet5 = <ThrowOnError extends boolean = false>(
  options: Options<MediaGet5Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    MediaGet5Response,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zMediaGet5Response.parseAsync(data);
    },
    url: '/api/media/transform/line/{direction}/{size}',
    ...options,
  });
};

export const weather = <ThrowOnError extends boolean = false>(
  options: Options<WeatherData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WeatherResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zWeatherResponse.parseAsync(data);
    },
    url: '/api/weather/{longitude}/{latitude}/current',
    ...options,
  });
};

export const weatherAll = <ThrowOnError extends boolean = false>(
  options: Options<WeatherAllData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WeatherAllResponse,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zWeatherAllResponse.parseAsync(data);
    },
    url: '/api/weather/{longitude}/{latitude}/hourly',
    ...options,
  });
};

export const weatherAll2 = <ThrowOnError extends boolean = false>(
  options: Options<WeatherAll2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WeatherAll2Response,
    unknown,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zWeatherAll2Response.parseAsync(data);
    },
    url: '/api/weather/{longitude}/{latitude}/daily',
    ...options,
  });
};
