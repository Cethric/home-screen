// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
  ConfigData,
  ConfigResponses,
  MediaGetData,
  MediaGetResponses,
  MediaAllData,
  MediaAllResponses,
  MediaPatchData,
  MediaPatchResponses,
  MediaPatchErrors,
  MediaGet2Data,
  MediaGet2Errors,
  MediaGet3Data,
  MediaGet3Errors,
  MediaGet4Data,
  MediaGet4Responses,
  MediaGet4Errors,
  MediaGet5Data,
  MediaGet5Responses,
  MediaGet5Errors,
  WeatherData,
  WeatherResponses,
  WeatherErrors,
  WeatherAllData,
  WeatherAllResponses,
  WeatherAllErrors,
  WeatherAll2Data,
  WeatherAll2Responses,
  WeatherAll2Errors,
} from './types.gen';
import {
  zConfigData,
  zConfigResponse,
  zMediaGetData,
  zMediaGetResponse,
  zMediaAllData,
  zMediaAllResponse,
  zMediaPatchData,
  zMediaPatchResponse,
  zMediaGet2Data,
  zMediaGet3Data,
  zMediaGet4Data,
  zMediaGet4Response,
  zMediaGet5Data,
  zMediaGet5Response,
  zWeatherData,
  zWeatherResponse,
  zWeatherAllData,
  zWeatherAllResponse,
  zWeatherAll2Data,
  zWeatherAll2Response,
} from './zod.gen';
import { client as _heyApiClient } from './client.gen';
import {
  mediaGetResponseTransformer,
  mediaAllResponseTransformer,
  mediaPatchResponseTransformer,
  weatherAllResponseTransformer,
  weatherAll2ResponseTransformer,
} from './transformers.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const config = <ThrowOnError extends boolean = false>(
  options?: Options<ConfigData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ConfigResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zConfigData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zConfigResponse.parseAsync(data);
    },
    url: '/api/config',
    ...options,
  });
};

export const mediaGet = <ThrowOnError extends boolean = false>(
  options: Options<MediaGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    MediaGetResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zMediaGetData.parseAsync(data);
    },
    responseTransformer: mediaGetResponseTransformer,
    responseValidator: async (data) => {
      return await zMediaGetResponse.parseAsync(data);
    },
    url: '/api/media/random',
    ...options,
  });
};

export const mediaAll = <ThrowOnError extends boolean = false>(
  options: Options<MediaAllData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    MediaAllResponses,
    unknown,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zMediaAllData.parseAsync(data);
    },
    responseTransformer: mediaAllResponseTransformer,
    responseValidator: async (data) => {
      return await zMediaAllResponse.parseAsync(data);
    },
    url: '/api/media/paginate',
    ...options,
  });
};

export const mediaPatch = <ThrowOnError extends boolean = false>(
  options: Options<MediaPatchData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    MediaPatchResponses,
    MediaPatchErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zMediaPatchData.parseAsync(data);
    },
    responseTransformer: mediaPatchResponseTransformer,
    responseValidator: async (data) => {
      return await zMediaPatchResponse.parseAsync(data);
    },
    url: '/api/media/item/{mediaId}/toggle',
    ...options,
  });
};

export const mediaGet2 = <ThrowOnError extends boolean = false>(
  options: Options<MediaGet2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    MediaGet2Errors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zMediaGet2Data.parseAsync(data);
    },
    url: '/api/media/download/item/{mediaId}/{width}/{height}',
    ...options,
  });
};

export const mediaGet3 = <ThrowOnError extends boolean = false>(
  options: Options<MediaGet3Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    MediaGet3Errors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zMediaGet3Data.parseAsync(data);
    },
    url: '/api/media/download/line/{direction}/{size}',
    ...options,
  });
};

export const mediaGet4 = <ThrowOnError extends boolean = false>(
  options: Options<MediaGet4Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    MediaGet4Responses,
    MediaGet4Errors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zMediaGet4Data.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zMediaGet4Response.parseAsync(data);
    },
    url: '/api/media/transform/item/{mediaId}/{width}/{height}',
    ...options,
  });
};

export const mediaGet5 = <ThrowOnError extends boolean = false>(
  options: Options<MediaGet5Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    MediaGet5Responses,
    MediaGet5Errors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zMediaGet5Data.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zMediaGet5Response.parseAsync(data);
    },
    url: '/api/media/transform/line/{direction}/{size}',
    ...options,
  });
};

export const weather = <ThrowOnError extends boolean = false>(
  options: Options<WeatherData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WeatherResponses,
    WeatherErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zWeatherData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zWeatherResponse.parseAsync(data);
    },
    url: '/api/weather/{longitude}/{latitude}/current',
    ...options,
  });
};

export const weatherAll = <ThrowOnError extends boolean = false>(
  options: Options<WeatherAllData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WeatherAllResponses,
    WeatherAllErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zWeatherAllData.parseAsync(data);
    },
    responseTransformer: weatherAllResponseTransformer,
    responseValidator: async (data) => {
      return await zWeatherAllResponse.parseAsync(data);
    },
    url: '/api/weather/{longitude}/{latitude}/hourly',
    ...options,
  });
};

export const weatherAll2 = <ThrowOnError extends boolean = false>(
  options: Options<WeatherAll2Data, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    WeatherAll2Responses,
    WeatherAll2Errors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zWeatherAll2Data.parseAsync(data);
    },
    responseTransformer: weatherAll2ResponseTransformer,
    responseValidator: async (data) => {
      return await zWeatherAll2Response.parseAsync(data);
    },
    url: '/api/weather/{longitude}/{latitude}/daily',
    ...options,
  });
};
