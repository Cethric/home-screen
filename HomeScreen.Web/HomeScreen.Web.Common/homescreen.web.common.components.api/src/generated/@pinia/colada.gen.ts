// This file is auto-generated by @hey-api/openapi-ts

import { type _JSONValue, defineQueryOptions, type UseMutationOptions } from '@pinia/colada';

import { serializeQueryKeyValue } from '../client';
import { client } from '../client.gen';
import {
  config,
  mediaAll,
  mediaGet,
  mediaGet2,
  mediaGet3,
  mediaGet4,
  mediaGet5,
  mediaPatch,
  type Options,
  weather,
  weatherAll,
  weatherAll2,
} from '../sdk.gen';
import type {
  ConfigData,
  MediaAllData,
  MediaGet2Data,
  MediaGet3Data,
  MediaGet4Data,
  MediaGet5Data,
  MediaGetData,
  MediaPatchData,
  MediaPatchResponse,
  WeatherAll2Data,
  WeatherAllData,
  WeatherData,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'path'> & {
    _id: string;
    baseUrl?: _JSONValue;
    body?: _JSONValue;
    query?: _JSONValue;
    tags?: _JSONValue;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (tags) {
    params.tags = tags as unknown as _JSONValue;
  }
  if (options?.body !== undefined) {
    const normalizedBody = serializeQueryKeyValue(options.body);
    if (normalizedBody !== undefined) {
      params.body = normalizedBody;
    }
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query !== undefined) {
    const normalizedQuery = serializeQueryKeyValue(options.query);
    if (normalizedQuery !== undefined) {
      params.query = normalizedQuery;
    }
  }
  return [params];
};

export const configQueryKey = (options?: Options<ConfigData>) => createQueryKey('config', options, ['config']);

export const configQuery = defineQueryOptions((options?: Options<ConfigData>) => ({
  key: configQueryKey(options),
  query: async (context) => {
    const { data } = await config({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));

export const mediaGetQueryKey = (options: Options<MediaGetData>) =>
  createQueryKey('mediaGet', options, ['random', 'media']);

export const mediaGetQuery = defineQueryOptions((options: Options<MediaGetData>) => ({
  key: mediaGetQueryKey(options),
  query: async (context) => {
    const { data } = await mediaGet({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));

export const mediaAllQueryKey = (options: Options<MediaAllData>) =>
  createQueryKey('mediaAll', options, ['paginate', 'media']);

export const mediaAllQuery = defineQueryOptions((options: Options<MediaAllData>) => ({
  key: mediaAllQueryKey(options),
  query: async (context) => {
    const { data } = await mediaAll({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));

export const mediaPatchMutation = (
  options?: Partial<Options<MediaPatchData>>,
): UseMutationOptions<MediaPatchResponse, Options<MediaPatchData>, Error> => {
  return {
    mutation: async (fnOptions) => {
      const { data } = await mediaPatch({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
};

export const mediaGet2QueryKey = (options: Options<MediaGet2Data>) =>
  createQueryKey('mediaGet2', options, ['item', 'download', 'media']);

export const mediaGet2Query = defineQueryOptions((options: Options<MediaGet2Data>) => ({
  key: mediaGet2QueryKey(options),
  query: async (context) => {
    const { data } = await mediaGet2({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));

export const mediaGet3QueryKey = (options: Options<MediaGet3Data>) =>
  createQueryKey('mediaGet3', options, ['line', 'download', 'media']);

export const mediaGet3Query = defineQueryOptions((options: Options<MediaGet3Data>) => ({
  key: mediaGet3QueryKey(options),
  query: async (context) => {
    const { data } = await mediaGet3({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));

export const mediaGet4QueryKey = (options: Options<MediaGet4Data>) =>
  createQueryKey('mediaGet4', options, ['item', 'transform', 'media']);

export const mediaGet4Query = defineQueryOptions((options: Options<MediaGet4Data>) => ({
  key: mediaGet4QueryKey(options),
  query: async (context) => {
    const { data } = await mediaGet4({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));

export const mediaGet5QueryKey = (options: Options<MediaGet5Data>) =>
  createQueryKey('mediaGet5', options, ['line', 'transform', 'media']);

export const mediaGet5Query = defineQueryOptions((options: Options<MediaGet5Data>) => ({
  key: mediaGet5QueryKey(options),
  query: async (context) => {
    const { data } = await mediaGet5({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));

export const weatherQueryKey = (options: Options<WeatherData>) =>
  createQueryKey('weather', options, ['weather', 'current']);

export const weatherQuery = defineQueryOptions((options: Options<WeatherData>) => ({
  key: weatherQueryKey(options),
  query: async (context) => {
    const { data } = await weather({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));

export const weatherAllQueryKey = (options: Options<WeatherAllData>) =>
  createQueryKey('weatherAll', options, ['weather', 'hourly']);

export const weatherAllQuery = defineQueryOptions((options: Options<WeatherAllData>) => ({
  key: weatherAllQueryKey(options),
  query: async (context) => {
    const { data } = await weatherAll({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));

export const weatherAll2QueryKey = (options: Options<WeatherAll2Data>) =>
  createQueryKey('weatherAll2', options, ['weather', 'daily']);

export const weatherAll2Query = defineQueryOptions((options: Options<WeatherAll2Data>) => ({
  key: weatherAll2QueryKey(options),
  query: async (context) => {
    const { data } = await weatherAll2({
      ...options,
      ...context,
      throwOnError: true,
    });
    return data;
  },
}));
