/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/random": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MediaGET"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/paginate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MediaAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/item/{mediaId}/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["MediaPATCH"];
        trace?: never;
    };
    "/api/media/download/item/{mediaId}/{width}/{height}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MediaGET2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/download/line/{direction}/{size}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MediaGET3"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/transform/item/{mediaId}/{width}/{height}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MediaGET4"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/media/transform/line/{direction}/{size}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MediaGET5"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/weather/{longitude}/{latitude}/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Weather"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/weather/{longitude}/{latitude}/hourly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["WeatherAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/weather/{longitude}/{latitude}/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["WeatherAll2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Config: {
            otlpConfig: components["schemas"]["OtlpConfig"];
        };
        OtlpConfig: {
            endpoint: string;
            headers: string;
            attributes: string;
        };
        MediaItem: {
            /** Format: guid */
            id?: string;
            /** Format: date-time */
            created?: string;
            notes?: string;
            enabled?: boolean;
            location?: components["schemas"]["MediaItemLocation"];
            /** Format: double */
            aspectRatioWidth?: number;
            /** Format: double */
            aspectRatioHeight?: number;
            baseB?: number;
            baseG?: number;
            baseR?: number;
        };
        MediaItemLocation: {
            name?: string;
            /** Format: double */
            latitude?: number;
            /** Format: double */
            longitude?: number;
        };
        PaginatedMediaItem: {
            mediaItem?: components["schemas"]["MediaItem"];
            /** Format: uint64 */
            totalPages: number;
        };
        NotFound: {
            /** Format: int32 */
            statusCode?: number;
        };
        BadRequest: {
            /** Format: int32 */
            statusCode?: number;
        };
        /** Format: binary */
        FileStreamHttpResult: Record<string, never>;
        /** @enum {string} */
        MediaTransformOptionsFormat: MediaTransformOptionsFormat;
        AcceptedTransformMediaItem: {
            /** Format: guid */
            mediaId?: string;
            width?: number;
            height?: number;
            blur?: boolean;
            format?: components["schemas"]["MediaTransformOptionsFormat"];
            url?: string;
        };
        AcceptedTransformMediaLine: Record<string, never>;
        WeatherForecast: {
            /** Format: float */
            feelsLikeTemperature?: number;
            /** Format: float */
            maxTemperature?: number;
            /** Format: float */
            minTemperature?: number;
            /** Format: float */
            chanceOfRain?: number;
            /** Format: float */
            amountOfRain?: number;
            weatherCode?: string;
        };
        HourlyForecast: {
            /** Format: date-time */
            time?: string;
            /** Format: float */
            apparentTemperature?: number;
            /** Format: float */
            precipitation?: number;
            /** Format: float */
            precipitationProbability?: number;
            /** Format: float */
            windDirection?: number;
            /** Format: float */
            windSpeed?: number;
            /** Format: float */
            windGusts?: number;
            isDay?: boolean;
            /** Format: float */
            cloudCover?: number;
        };
        DailyForecast: {
            /** Format: date */
            time?: string;
            /** Format: float */
            apparentTemperatureMin?: number;
            /** Format: float */
            apparentTemperatureMax?: number;
            /** Format: float */
            daylightDuration?: number;
            /** Format: date-time */
            sunrise?: string;
            /** Format: date-time */
            sunset?: string;
            /** Format: float */
            uvIndexClearSkyMax?: number;
            /** Format: float */
            uvIndexMax?: number;
            weatherCode?: components["schemas"]["WmoWeatherCode"];
            weatherCodeLabel?: string;
            /** Format: float */
            precipitationSum?: number;
            /** Format: float */
            precipitationProbabilityMax?: number;
            /** Format: float */
            precipitationProbabilityMin?: number;
        };
        /** @enum {string} */
        WmoWeatherCode: WmoWeatherCode;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    Config: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Config"];
                };
            };
        };
    };
    MediaGET: {
        parameters: {
            query: {
                count: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json-seq": components["schemas"]["MediaItem"];
                };
            };
        };
    };
    MediaAll: {
        parameters: {
            query: {
                offset: number;
                length: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMediaItem"][];
                };
            };
        };
    };
    MediaPATCH: {
        parameters: {
            query: {
                enabled: boolean;
            };
            header?: never;
            path: {
                mediaId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaItem"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MediaGET2: {
        parameters: {
            query: {
                blur: boolean;
                format: components["schemas"]["MediaTransformOptionsFormat"];
            };
            header?: never;
            path: {
                mediaId: string;
                width: number;
                height: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileStreamHttpResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequest"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    MediaGET3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                direction: number;
                size: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileStreamHttpResult"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequest"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFound"];
                };
            };
        };
    };
    MediaGET4: {
        parameters: {
            query: {
                blur: boolean;
                format: components["schemas"]["MediaTransformOptionsFormat"];
            };
            header?: never;
            path: {
                mediaId: string;
                width: number;
                height: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcceptedTransformMediaItem"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MediaGET5: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                direction: number;
                size: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AcceptedTransformMediaLine"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Weather: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                longitude: number;
                latitude: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WeatherForecast"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeatherAll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                longitude: number;
                latitude: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HourlyForecast"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WeatherAll2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                longitude: number;
                latitude: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyForecast"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export enum MediaTransformOptionsFormat {
    Jpeg = "Jpeg",
    JpegXl = "JpegXl",
    Png = "Png",
    WebP = "WebP",
    Avif = "Avif"
}
export enum WmoWeatherCode {
    Clear = "Clear",
    MostlyClear = "MostlyClear",
    PartlyClear = "PartlyClear",
    Overcast = "Overcast",
    Fog = "Fog",
    RimeFog = "RimeFog",
    LightDrizzle = "LightDrizzle",
    MediumDrizzle = "MediumDrizzle",
    HeavyDrizzle = "HeavyDrizzle",
    LightFreezingDrizzle = "LightFreezingDrizzle",
    HeavyFreezingDrizzle = "HeavyFreezingDrizzle",
    LightRain = "LightRain",
    MediumRain = "MediumRain",
    HeavyRain = "HeavyRain",
    LightFreezingRain = "LightFreezingRain",
    HeavyFreezingRain = "HeavyFreezingRain",
    LightSnow = "LightSnow",
    MediumSnow = "MediumSnow",
    HeavySnow = "HeavySnow",
    GrainySnow = "GrainySnow",
    LightRainShower = "LightRainShower",
    MediumRainShower = "MediumRainShower",
    HeavyRainShower = "HeavyRainShower",
    LightSnowShower = "LightSnowShower",
    HeavySnowShower = "HeavySnowShower",
    Thunderstorm = "Thunderstorm",
    ThunderstormWithSomeRain = "ThunderstormWithSomeRain",
    ThunderstormWithHeavyRain = "ThunderstormWithHeavyRain"
}
