//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Net.Http;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace HomeScreen.Service.Location.Infrastructure.Location.NominatimLocationService.Generated.Entities
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface INominatimClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reverse Geocoding
        /// </summary>
        /// <remarks>
        /// Reverse geocoding generates an address from a coordinate given as latitude and longitude.
        /// <br/>
        /// <br/># How it works
        /// <br/>
        /// <br/>The reverse geocoding API does not exactly compute the address for the coordinate it receives. It works by finding the closest suitable OSM object and returning its address information. This may occasionally lead to unexpected results.
        /// <br/>
        /// <br/>First of all, Nominatim only includes OSM objects in its index that are suitable for searching. Small, unnamed paths for example are missing from the database and can therefore not be used for reverse geocoding either.
        /// <br/>
        /// <br/>The other issue to be aware of is that the closest OSM object may not always have a similar enough address to the coordinate you were requesting. For example, in dense city areas it may belong to a completely different street."
        /// </remarks>
        /// <param name="lat">Latitude of a coordinate in WGS84 projection. The API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage.</param>
        /// <param name="lon">Longitude of a coordinate in WGS84 projection. The API returns exactly one result or an error when the coordinate is in an area with no OSM data coverage.</param>
        /// <param name="addressdetails">When set to 1, include a breakdown of the address into elements. The exact content of the address breakdown depends on the output format.</param>
        /// <param name="extratags">When set to 1, the response include any additional information in the result that is available in the database, e.g. wikipedia link, opening hours.</param>
        /// <param name="namedetails">When set to 1, include a full list of names for the result. These may include language variants, older names, references and brand.</param>
        /// <param name="accept_language">Preferred language order for showing search results. This may either be a simple comma-separated list of language codes or have the same format as the ["Accept-Language" HTTP header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).</param>
        /// <param name="zoom">Level of detail required for the address. This is a number that corresponds roughly to the zoom level used in XYZ tile sources in frameworks like Leaflet.js, Openlayers etc.</param>
        /// <param name="layer">The layer filter allows to select places by themes.
        /// <br/>
        /// <br/>The `address` layer contains all places that make up an address: address points with house numbers, streets, inhabited places (suburbs, villages, cities, states etc.) and administrative boundaries.
        /// <br/>
        /// <br/>The `poi` layer selects all point of interest. This includes classic points of interest like restaurants, shops, hotels but also less obvious features like recycling bins, guideposts or benches.
        /// <br/>
        /// <br/>The `railway` layer includes railway infrastructure like tracks. Note that in Nominatim's standard configuration, only very few railway features are imported into the database.
        /// <br/>
        /// <br/>The `natural` layer collects features like rivers, lakes and mountains while the manmade layer functions as a catch-all for features not covered by the other layers.</param>
        /// <param name="polygon_geojson">Add the full geometry of the place to the result output. Output formats in GeoJSON, KML, SVG or WKT are supported.</param>
        /// <param name="polygon_kml">Add the full geometry of the place to the result output. Output formats in GeoJSON, KML, SVG or WKT are supported.</param>
        /// <param name="polygon_svg">Add the full geometry of the place to the result output. Output formats in GeoJSON, KML, SVG or WKT are supported.</param>
        /// <param name="polygon_text">Add the full geometry of the place to the result output. Output formats in GeoJSON, KML, SVG or WKT are supported.</param>
        /// <param name="polygon_threshold">When one of the polygon_* outputs is chosen, return a simplified version of the output geometry. The parameter describes the tolerance in degrees with which the geometry may differ from the original geometry. Topology is preserved in the geometry.</param>
        /// <param name="email">If you are making large numbers of request please include an appropriate email address to identify your requests. See Nominatim's [Usage Policy](https://operations.osmfoundation.org/policies/nominatim/) for more details.</param>
        /// <param name="debug">Output assorted developer debug information. Data on internals of Nominatim's "search loop" logic, and SQL queries. The output is HTML format. This overrides the specified machine readable format.</param>
        /// <returns>Successfully retrieve the current forecast</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SwaggerResponse<ReverseOutputJson>> Reverse_phpAsync(double lat, double lon, OutputFormat? format = null, double? addressdetails = null, double? extratags = null, double? namedetails = null, string? accept_language = null, double? zoom = null, Layer? layer = null, double? polygon_geojson = null, double? polygon_kml = null, double? polygon_svg = null, double? polygon_text = null, float? polygon_threshold = null, string? email = null, double? debug = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"xml")]
        Xml = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"jsonv2")]
        Jsonv2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"geojson")]
        Geojson = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"geocodejson")]
        Geocodejson = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NumberBoolean
    {

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"1")]
        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Layer
    {

        [System.Runtime.Serialization.EnumMember(Value = @"address")]
        Address = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"poi")]
        Poi = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"railway")]
        Railway = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"natural")]
        Natural = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"manmade")]
        Manmade = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReverseOutputJsonBase
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReverseOutputJsonBase(Address? @address, string? @addresstype, IList<string>? @boundingbox, string? @display_name, float? @importance, string? @lat, string? @licence, string? @lon, string? @name, double? @osm_id, string? @osm_type, double? @place_id, double? @place_rank, string? @type)

        {

            this.Place_id = @place_id;

            this.Licence = @licence;

            this.Osm_type = @osm_type;

            this.Osm_id = @osm_id;

            this.Lat = @lat;

            this.Lon = @lon;

            this.Place_rank = @place_rank;

            this.Type = @type;

            this.Importance = @importance;

            this.Addresstype = @addresstype;

            this.Display_name = @display_name;

            this.Name = @name;

            this.Address = @address;

            this.Boundingbox = @boundingbox;

        }
        [System.Text.Json.Serialization.JsonPropertyName("place_id")]
        public double? Place_id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("licence")]
        public string? Licence { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("osm_type")]
        public string? Osm_type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("osm_id")]
        public double? Osm_id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lat")]
        public string? Lat { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lon")]
        public string? Lon { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("place_rank")]
        public double? Place_rank { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("importance")]
        public float? Importance { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("addresstype")]
        public string? Addresstype { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("display_name")]
        public string? Display_name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public Address? Address { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("boundingbox")]
        public IList<string>? Boundingbox { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReverseOutputJsonBase FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReverseOutputJsonBase>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReverseOutputJson : ReverseOutputJsonBase
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReverseOutputJson(Address? @address, string? @addresstype, IList<string>? @boundingbox, string? @class, string? @display_name, float? @importance, string? @lat, string? @licence, string? @lon, string? @name, double? @osm_id, string? @osm_type, double? @place_id, double? @place_rank, string? @type)

            : base(address, addresstype, boundingbox, display_name, importance, lat, licence, lon, name, osm_id, osm_type, place_id, place_rank, type)

        {

            this.Class = @class;

        }
        [System.Text.Json.Serialization.JsonPropertyName("class")]
        public string? Class { get; init; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReverseOutputJson FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReverseOutputJson>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReverseOutputJsonV2 : ReverseOutputJsonBase
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReverseOutputJsonV2(Address? @address, string? @addresstype, IList<string>? @boundingbox, string? @category, string? @display_name, float? @importance, string? @lat, string? @licence, string? @lon, string? @name, double? @osm_id, string? @osm_type, double? @place_id, double? @place_rank, string? @type)

            : base(address, addresstype, boundingbox, display_name, importance, lat, licence, lon, name, osm_id, osm_type, place_id, place_rank, type)

        {

            this.Category = @category;

        }
        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; init; }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReverseOutputJsonV2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReverseOutputJsonV2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReverseOutputGeoJson
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReverseOutputGeoJson(IList<Features>? @features, string? @licence, string? @type)

        {

            this.Type = @type;

            this.Licence = @licence;

            this.Features = @features;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("licence")]
        public string? Licence { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("features")]
        public IList<Features>? Features { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReverseOutputGeoJson FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReverseOutputGeoJson>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReverseOutputGeoCodeJson
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReverseOutputGeoCodeJson(IList<features>? @features, Geocoding? @geocoding, string? @type)

        {

            this.Type = @type;

            this.Geocoding = @geocoding;

            this.Features = @features;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("geocoding")]
        public Geocoding? Geocoding { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("features")]
        public IList<features>? Features { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReverseOutputGeoCodeJson FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReverseOutputGeoCodeJson>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ReverseOutputXml
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ReverseOutputXml(Addressparts? @addressparts, string? @attribution, string? @querystring, Result? @result, string? @timestamp)

        {

            this.Timestamp = @timestamp;

            this.Querystring = @querystring;

            this.Attribution = @attribution;

            this.Result = @result;

            this.Addressparts = @addressparts;

        }
        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        public string? Timestamp { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("querystring")]
        public string? Querystring { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("attribution")]
        public string? Attribution { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public Result? Result { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("addressparts")]
        public Addressparts? Addressparts { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReverseOutputXml FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReverseOutputXml>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Address
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Address(string? @country, string? @country_code, string? @postcode, string? @road, string? @state, string? @state_district, string? @village)

        {

            this.Road = @road;

            this.Village = @village;

            this.State_district = @state_district;

            this.State = @state;

            this.Postcode = @postcode;

            this.Country = @country;

            this.Country_code = @country_code;

        }
        [System.Text.Json.Serialization.JsonPropertyName("road")]
        public string? Road { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("village")]
        public string? Village { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("state_district")]
        public string? State_district { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("postcode")]
        public string? Postcode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]
        public string? Country_code { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Address FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Address>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Features
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Features(IList<float>? @bbox, Geometry? @geometry, ReverseOutputJsonV2? @properties, string? @type)

        {

            this.Type = @type;

            this.Properties = @properties;

            this.Bbox = @bbox;

            this.Geometry = @geometry;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public ReverseOutputJsonV2? Properties { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("bbox")]
        public IList<float>? Bbox { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("geometry")]
        public Geometry? Geometry { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Features FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Features>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record features
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public features(Geometry2? @geometry, Properties? @properties, string? @type)

        {

            this.Type = @type;

            this.Properties = @properties;

            this.Geometry = @geometry;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public Properties? Properties { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("geometry")]
        public Geometry2? Geometry { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static features FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<features>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Geocoding
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Geocoding(string? @attribution, string? @licence, string? @query, string? @version)

        {

            this.Version = @version;

            this.Attribution = @attribution;

            this.Licence = @licence;

            this.Query = @query;

        }
        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string? Version { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("attribution")]
        public string? Attribution { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("licence")]
        public string? Licence { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("query")]
        public string? Query { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Geocoding FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Geocoding>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Addressparts
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Addressparts(string? @city, string? @country, string? @country_code, string? @county, string? @house_number, string? @postcode, string? @road, string? @town, string? @village)

        {

            this.House_number = @house_number;

            this.Road = @road;

            this.Village = @village;

            this.Town = @town;

            this.City = @city;

            this.County = @county;

            this.Postcode = @postcode;

            this.Country = @country;

            this.Country_code = @country_code;

        }
        [System.Text.Json.Serialization.JsonPropertyName("house_number")]
        public string? House_number { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("road")]
        public string? Road { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("village")]
        public string? Village { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("town")]
        public string? Town { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("county")]
        public string? County { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("postcode")]
        public string? Postcode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("country_code")]
        public string? Country_code { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Addressparts FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Addressparts>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Result : Anonymous
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Result(double? @address_rank, string? @boundingbox, float? @lat, float? @lon, double? @osm_id, string? @osm_type, double? @place_id, double? @place_rank)

            : base(address_rank, boundingbox, lat, lon, osm_id, osm_type, place_id, place_rank)

        {

        }
        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Result FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Result>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Geometry
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Geometry(IList<float>? @coordinates, string? @type)

        {

            this.Type = @type;

            this.Coordinates = @coordinates;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("coordinates")]
        public IList<float>? Coordinates { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Geometry FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Geometry>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Geometry2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Geometry2(IList<float>? @coordinates, string? @type)

        {

            this.Type = @type;

            this.Coordinates = @coordinates;

        }
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("coordinates")]
        public IList<float>? Coordinates { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Geometry2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Geometry2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Properties
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Properties(Geocoding2? @geocoding)

        {

            this.Geocoding = @geocoding;

        }
        [System.Text.Json.Serialization.JsonPropertyName("geocoding")]
        public Geocoding2? Geocoding { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Properties FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Properties>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Anonymous
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Anonymous(double? @address_rank, string? @boundingbox, float? @lat, float? @lon, double? @osm_id, string? @osm_type, double? @place_id, double? @place_rank)

        {

            this.Place_id = @place_id;

            this.Osm_type = @osm_type;

            this.Osm_id = @osm_id;

            this.Lat = @lat;

            this.Lon = @lon;

            this.Boundingbox = @boundingbox;

            this.Place_rank = @place_rank;

            this.Address_rank = @address_rank;

        }
        [System.Text.Json.Serialization.JsonPropertyName("place_id")]
        public double? Place_id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("osm_type")]
        public string? Osm_type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("osm_id")]
        public double? Osm_id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lat")]
        public float? Lat { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lon")]
        public float? Lon { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("boundingbox")]
        public string? Boundingbox { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("place_rank")]
        public double? Place_rank { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("address_rank")]
        public double? Address_rank { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Geocoding2
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Geocoding2(double? @accuracy, Admin? @admin, string? @city, string? @country, string? @county, string? @district, string? @label, string? @locality, double? @osm_id, string? @osm_key, string? @osm_type, string? @osm_value, double? @place_id, string? @postcode, string? @state, string? @street, string? @type)

        {

            this.Place_id = @place_id;

            this.Osm_type = @osm_type;

            this.Osm_id = @osm_id;

            this.Osm_key = @osm_key;

            this.Osm_value = @osm_value;

            this.Type = @type;

            this.Accuracy = @accuracy;

            this.Label = @label;

            this.Postcode = @postcode;

            this.Street = @street;

            this.Locality = @locality;

            this.District = @district;

            this.City = @city;

            this.County = @county;

            this.State = @state;

            this.Country = @country;

            this.Admin = @admin;

        }
        [System.Text.Json.Serialization.JsonPropertyName("place_id")]
        public double? Place_id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("osm_type")]
        public string? Osm_type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("osm_id")]
        public double? Osm_id { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("osm_key")]
        public string? Osm_key { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("osm_value")]
        public string? Osm_value { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("accuracy")]
        public double? Accuracy { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("postcode")]
        public string? Postcode { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        public string? Street { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("locality")]
        public string? Locality { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("district")]
        public string? District { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("county")]
        public string? County { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("admin")]
        public Admin? Admin { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Geocoding2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Geocoding2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Admin
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public Admin(string? @level10, string? @level4, string? @level5, string? @level8)

        {

            this.Level10 = @level10;

            this.Level8 = @level8;

            this.Level5 = @level5;

            this.Level4 = @level4;

        }
        [System.Text.Json.Serialization.JsonPropertyName("level10")]
        public string? Level10 { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("level8")]
        public string? Level8 { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("level5")]
        public string? Level5 { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("level4")]
        public string? Level4 { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Admin FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Admin>(data, options);

        }

    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse<TResult> : SwaggerResponse
    {
        public TResult Result { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625