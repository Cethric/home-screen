/*
 * Nominatim Open API Spec
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: blake.rogan@outlook.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = HomeScreen.OpenAPI.Nominatim.Client.FileParameter;
using OpenAPIDateConverter = HomeScreen.OpenAPI.Nominatim.Client.OpenAPIDateConverter;

namespace HomeScreen.OpenAPI.Nominatim.Model
{
    /// <summary>
    /// ReverseOutputXmlAddressparts
    /// </summary>
    [DataContract(Name = "ReverseOutputXml_addressparts")]
    public partial class ReverseOutputXmlAddressparts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReverseOutputXmlAddressparts" /> class.
        /// </summary>
        /// <param name="houseNumber">houseNumber.</param>
        /// <param name="road">road.</param>
        /// <param name="village">village.</param>
        /// <param name="town">town.</param>
        /// <param name="city">city.</param>
        /// <param name="county">county.</param>
        /// <param name="postcode">postcode.</param>
        /// <param name="country">country.</param>
        /// <param name="countryCode">countryCode.</param>
        public ReverseOutputXmlAddressparts(string houseNumber = default(string), string road = default(string), string village = default(string), string town = default(string), string city = default(string), string county = default(string), string postcode = default(string), string country = default(string), string countryCode = default(string))
        {
            this._HouseNumber = houseNumber;
            if (this.HouseNumber != null)
            {
                this._flagHouseNumber = true;
            }
            this._Road = road;
            if (this.Road != null)
            {
                this._flagRoad = true;
            }
            this._Village = village;
            if (this.Village != null)
            {
                this._flagVillage = true;
            }
            this._Town = town;
            if (this.Town != null)
            {
                this._flagTown = true;
            }
            this._City = city;
            if (this.City != null)
            {
                this._flagCity = true;
            }
            this._County = county;
            if (this.County != null)
            {
                this._flagCounty = true;
            }
            this._Postcode = postcode;
            if (this.Postcode != null)
            {
                this._flagPostcode = true;
            }
            this._Country = country;
            if (this.Country != null)
            {
                this._flagCountry = true;
            }
            this._CountryCode = countryCode;
            if (this.CountryCode != null)
            {
                this._flagCountryCode = true;
            }
        }

        /// <summary>
        /// Gets or Sets HouseNumber
        /// </summary>
        [DataMember(Name = "house_number", EmitDefaultValue = false)]
        public string HouseNumber
        {
            get{ return _HouseNumber;}
            set
            {
                _HouseNumber = value;
                _flagHouseNumber = true;
            }
        }
        private string _HouseNumber;
        private bool _flagHouseNumber;

        /// <summary>
        /// Returns false as HouseNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHouseNumber()
        {
            return _flagHouseNumber;
        }
        /// <summary>
        /// Gets or Sets Road
        /// </summary>
        [DataMember(Name = "road", EmitDefaultValue = false)]
        public string Road
        {
            get{ return _Road;}
            set
            {
                _Road = value;
                _flagRoad = true;
            }
        }
        private string _Road;
        private bool _flagRoad;

        /// <summary>
        /// Returns false as Road should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRoad()
        {
            return _flagRoad;
        }
        /// <summary>
        /// Gets or Sets Village
        /// </summary>
        [DataMember(Name = "village", EmitDefaultValue = false)]
        public string Village
        {
            get{ return _Village;}
            set
            {
                _Village = value;
                _flagVillage = true;
            }
        }
        private string _Village;
        private bool _flagVillage;

        /// <summary>
        /// Returns false as Village should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVillage()
        {
            return _flagVillage;
        }
        /// <summary>
        /// Gets or Sets Town
        /// </summary>
        [DataMember(Name = "town", EmitDefaultValue = false)]
        public string Town
        {
            get{ return _Town;}
            set
            {
                _Town = value;
                _flagTown = true;
            }
        }
        private string _Town;
        private bool _flagTown;

        /// <summary>
        /// Returns false as Town should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTown()
        {
            return _flagTown;
        }
        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City
        {
            get{ return _City;}
            set
            {
                _City = value;
                _flagCity = true;
            }
        }
        private string _City;
        private bool _flagCity;

        /// <summary>
        /// Returns false as City should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCity()
        {
            return _flagCity;
        }
        /// <summary>
        /// Gets or Sets County
        /// </summary>
        [DataMember(Name = "county", EmitDefaultValue = false)]
        public string County
        {
            get{ return _County;}
            set
            {
                _County = value;
                _flagCounty = true;
            }
        }
        private string _County;
        private bool _flagCounty;

        /// <summary>
        /// Returns false as County should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCounty()
        {
            return _flagCounty;
        }
        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name = "postcode", EmitDefaultValue = false)]
        public string Postcode
        {
            get{ return _Postcode;}
            set
            {
                _Postcode = value;
                _flagPostcode = true;
            }
        }
        private string _Postcode;
        private bool _flagPostcode;

        /// <summary>
        /// Returns false as Postcode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePostcode()
        {
            return _flagPostcode;
        }
        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country
        {
            get{ return _Country;}
            set
            {
                _Country = value;
                _flagCountry = true;
            }
        }
        private string _Country;
        private bool _flagCountry;

        /// <summary>
        /// Returns false as Country should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountry()
        {
            return _flagCountry;
        }
        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode
        {
            get{ return _CountryCode;}
            set
            {
                _CountryCode = value;
                _flagCountryCode = true;
            }
        }
        private string _CountryCode;
        private bool _flagCountryCode;

        /// <summary>
        /// Returns false as CountryCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountryCode()
        {
            return _flagCountryCode;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReverseOutputXmlAddressparts {\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  Road: ").Append(Road).Append("\n");
            sb.Append("  Village: ").Append(Village).Append("\n");
            sb.Append("  Town: ").Append(Town).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
