/*
 * Nominatim Open API Spec
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: blake.rogan@outlook.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = HomeScreen.OpenAPI.Nominatim.Client.FileParameter;
using OpenAPIDateConverter = HomeScreen.OpenAPI.Nominatim.Client.OpenAPIDateConverter;

namespace HomeScreen.OpenAPI.Nominatim.Model
{
    /// <summary>
    /// ReverseOutputXml
    /// </summary>
    [DataContract(Name = "ReverseOutputXml")]
    public partial class ReverseOutputXml : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReverseOutputXml" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="querystring">querystring.</param>
        /// <param name="attribution">attribution.</param>
        /// <param name="result">result.</param>
        /// <param name="addressparts">addressparts.</param>
        public ReverseOutputXml(string timestamp = default(string), string querystring = default(string), string attribution = default(string), ReverseOutputXmlResult result = default(ReverseOutputXmlResult), ReverseOutputXmlAddressparts addressparts = default(ReverseOutputXmlAddressparts))
        {
            this._Timestamp = timestamp;
            if (this.Timestamp != null)
            {
                this._flagTimestamp = true;
            }
            this._Querystring = querystring;
            if (this.Querystring != null)
            {
                this._flagQuerystring = true;
            }
            this._Attribution = attribution;
            if (this.Attribution != null)
            {
                this._flagAttribution = true;
            }
            this._Result = result;
            if (this.Result != null)
            {
                this._flagResult = true;
            }
            this._Addressparts = addressparts;
            if (this.Addressparts != null)
            {
                this._flagAddressparts = true;
            }
        }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public string Timestamp
        {
            get{ return _Timestamp;}
            set
            {
                _Timestamp = value;
                _flagTimestamp = true;
            }
        }
        private string _Timestamp;
        private bool _flagTimestamp;

        /// <summary>
        /// Returns false as Timestamp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTimestamp()
        {
            return _flagTimestamp;
        }
        /// <summary>
        /// Gets or Sets Querystring
        /// </summary>
        [DataMember(Name = "querystring", EmitDefaultValue = false)]
        public string Querystring
        {
            get{ return _Querystring;}
            set
            {
                _Querystring = value;
                _flagQuerystring = true;
            }
        }
        private string _Querystring;
        private bool _flagQuerystring;

        /// <summary>
        /// Returns false as Querystring should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuerystring()
        {
            return _flagQuerystring;
        }
        /// <summary>
        /// Gets or Sets Attribution
        /// </summary>
        [DataMember(Name = "attribution", EmitDefaultValue = false)]
        public string Attribution
        {
            get{ return _Attribution;}
            set
            {
                _Attribution = value;
                _flagAttribution = true;
            }
        }
        private string _Attribution;
        private bool _flagAttribution;

        /// <summary>
        /// Returns false as Attribution should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttribution()
        {
            return _flagAttribution;
        }
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public ReverseOutputXmlResult Result
        {
            get{ return _Result;}
            set
            {
                _Result = value;
                _flagResult = true;
            }
        }
        private ReverseOutputXmlResult _Result;
        private bool _flagResult;

        /// <summary>
        /// Returns false as Result should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResult()
        {
            return _flagResult;
        }
        /// <summary>
        /// Gets or Sets Addressparts
        /// </summary>
        [DataMember(Name = "addressparts", EmitDefaultValue = false)]
        public ReverseOutputXmlAddressparts Addressparts
        {
            get{ return _Addressparts;}
            set
            {
                _Addressparts = value;
                _flagAddressparts = true;
            }
        }
        private ReverseOutputXmlAddressparts _Addressparts;
        private bool _flagAddressparts;

        /// <summary>
        /// Returns false as Addressparts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressparts()
        {
            return _flagAddressparts;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReverseOutputXml {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Querystring: ").Append(Querystring).Append("\n");
            sb.Append("  Attribution: ").Append(Attribution).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Addressparts: ").Append(Addressparts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
