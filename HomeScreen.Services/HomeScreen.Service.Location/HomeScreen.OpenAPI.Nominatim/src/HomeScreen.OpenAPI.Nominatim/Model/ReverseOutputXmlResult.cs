/*
 * Nominatim Open API Spec
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: blake.rogan@outlook.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = HomeScreen.OpenAPI.Nominatim.Client.FileParameter;
using OpenAPIDateConverter = HomeScreen.OpenAPI.Nominatim.Client.OpenAPIDateConverter;

namespace HomeScreen.OpenAPI.Nominatim.Model
{
    /// <summary>
    /// ReverseOutputXmlResult
    /// </summary>
    [DataContract(Name = "ReverseOutputXml_result")]
    public partial class ReverseOutputXmlResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReverseOutputXmlResult" /> class.
        /// </summary>
        /// <param name="placeId">placeId.</param>
        /// <param name="osmType">osmType.</param>
        /// <param name="osmId">osmId.</param>
        /// <param name="lat">lat.</param>
        /// <param name="lon">lon.</param>
        /// <param name="boundingbox">boundingbox.</param>
        /// <param name="placeRank">placeRank.</param>
        /// <param name="addressRank">addressRank.</param>
        public ReverseOutputXmlResult(decimal placeId = default(decimal), string osmType = default(string), decimal osmId = default(decimal), float lat = default(float), float lon = default(float), string boundingbox = default(string), decimal placeRank = default(decimal), decimal addressRank = default(decimal))
        {
            this._PlaceId = placeId;
            if (this.PlaceId != null)
            {
                this._flagPlaceId = true;
            }
            this._OsmType = osmType;
            if (this.OsmType != null)
            {
                this._flagOsmType = true;
            }
            this._OsmId = osmId;
            if (this.OsmId != null)
            {
                this._flagOsmId = true;
            }
            this._Lat = lat;
            if (this.Lat != null)
            {
                this._flagLat = true;
            }
            this._Lon = lon;
            if (this.Lon != null)
            {
                this._flagLon = true;
            }
            this._Boundingbox = boundingbox;
            if (this.Boundingbox != null)
            {
                this._flagBoundingbox = true;
            }
            this._PlaceRank = placeRank;
            if (this.PlaceRank != null)
            {
                this._flagPlaceRank = true;
            }
            this._AddressRank = addressRank;
            if (this.AddressRank != null)
            {
                this._flagAddressRank = true;
            }
        }

        /// <summary>
        /// Gets or Sets PlaceId
        /// </summary>
        [DataMember(Name = "place_id", EmitDefaultValue = false)]
        public decimal PlaceId
        {
            get{ return _PlaceId;}
            set
            {
                _PlaceId = value;
                _flagPlaceId = true;
            }
        }
        private decimal _PlaceId;
        private bool _flagPlaceId;

        /// <summary>
        /// Returns false as PlaceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePlaceId()
        {
            return _flagPlaceId;
        }
        /// <summary>
        /// Gets or Sets OsmType
        /// </summary>
        [DataMember(Name = "osm_type", EmitDefaultValue = false)]
        public string OsmType
        {
            get{ return _OsmType;}
            set
            {
                _OsmType = value;
                _flagOsmType = true;
            }
        }
        private string _OsmType;
        private bool _flagOsmType;

        /// <summary>
        /// Returns false as OsmType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOsmType()
        {
            return _flagOsmType;
        }
        /// <summary>
        /// Gets or Sets OsmId
        /// </summary>
        [DataMember(Name = "osm_id", EmitDefaultValue = false)]
        public decimal OsmId
        {
            get{ return _OsmId;}
            set
            {
                _OsmId = value;
                _flagOsmId = true;
            }
        }
        private decimal _OsmId;
        private bool _flagOsmId;

        /// <summary>
        /// Returns false as OsmId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOsmId()
        {
            return _flagOsmId;
        }
        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name = "lat", EmitDefaultValue = false)]
        public float Lat
        {
            get{ return _Lat;}
            set
            {
                _Lat = value;
                _flagLat = true;
            }
        }
        private float _Lat;
        private bool _flagLat;

        /// <summary>
        /// Returns false as Lat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLat()
        {
            return _flagLat;
        }
        /// <summary>
        /// Gets or Sets Lon
        /// </summary>
        [DataMember(Name = "lon", EmitDefaultValue = false)]
        public float Lon
        {
            get{ return _Lon;}
            set
            {
                _Lon = value;
                _flagLon = true;
            }
        }
        private float _Lon;
        private bool _flagLon;

        /// <summary>
        /// Returns false as Lon should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLon()
        {
            return _flagLon;
        }
        /// <summary>
        /// Gets or Sets Boundingbox
        /// </summary>
        [DataMember(Name = "boundingbox", EmitDefaultValue = false)]
        public string Boundingbox
        {
            get{ return _Boundingbox;}
            set
            {
                _Boundingbox = value;
                _flagBoundingbox = true;
            }
        }
        private string _Boundingbox;
        private bool _flagBoundingbox;

        /// <summary>
        /// Returns false as Boundingbox should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBoundingbox()
        {
            return _flagBoundingbox;
        }
        /// <summary>
        /// Gets or Sets PlaceRank
        /// </summary>
        [DataMember(Name = "place_rank", EmitDefaultValue = false)]
        public decimal PlaceRank
        {
            get{ return _PlaceRank;}
            set
            {
                _PlaceRank = value;
                _flagPlaceRank = true;
            }
        }
        private decimal _PlaceRank;
        private bool _flagPlaceRank;

        /// <summary>
        /// Returns false as PlaceRank should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePlaceRank()
        {
            return _flagPlaceRank;
        }
        /// <summary>
        /// Gets or Sets AddressRank
        /// </summary>
        [DataMember(Name = "address_rank", EmitDefaultValue = false)]
        public decimal AddressRank
        {
            get{ return _AddressRank;}
            set
            {
                _AddressRank = value;
                _flagAddressRank = true;
            }
        }
        private decimal _AddressRank;
        private bool _flagAddressRank;

        /// <summary>
        /// Returns false as AddressRank should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressRank()
        {
            return _flagAddressRank;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReverseOutputXmlResult {\n");
            sb.Append("  PlaceId: ").Append(PlaceId).Append("\n");
            sb.Append("  OsmType: ").Append(OsmType).Append("\n");
            sb.Append("  OsmId: ").Append(OsmId).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("  Boundingbox: ").Append(Boundingbox).Append("\n");
            sb.Append("  PlaceRank: ").Append(PlaceRank).Append("\n");
            sb.Append("  AddressRank: ").Append(AddressRank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
