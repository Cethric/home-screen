//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Net.Http;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace HomeScreen.Service.Weather.Generated.Entities
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOpenMeteoClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieve the forecast
        /// </remarks>
        /// <param name="latitude">Geographical WGS84 coordinates of the location. Multiple coordinates are not supported</param>
        /// <param name="longitude">Geographical WGS84 coordinates of the location. Multiple coordinates are not supported</param>
        /// <param name="elevation">The elevation used for statistical downscaling. Per default, a 90 meter digital elevation model is used. You can manually set the elevation to correctly match mountain peaks. If &amp;elevation=nan is specified, downscaling will be disabled and the API uses the average grid-cell height</param>
        /// <param name="hourly">A list of weather variables which should be returned. Values can be comma separated, or multiple &amp;hourly= parameter in the URL can be used.</param>
        /// <param name="daily">A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &amp;daily= parameter in the URL can be used. If daily weather variables are specified, parameter timezone is required.</param>
        /// <param name="current">A list of weather variables to get current conditions.</param>
        /// <param name="temperature_unit">If `fahrenheit` is set, all temperature values are converted to Fahrenheit.</param>
        /// <param name="wind_speed_unit">Other wind speed speed units: `ms`, `mph` and `kn`</param>
        /// <param name="precipitation_unit">Other precipitation amount units: `inch`</param>
        /// <param name="timeformat">If format `unixtime` is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamp are in GMT+0! For daily values with unix timestamps, please apply `utc_offset_seconds` again to get the correct date.</param>
        /// <param name="timezone">If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone. For multiple coordinates, a comma separated list of timezones can be specified.</param>
        /// <param name="past_days">If `past_days` is set, yesterday or the day before yesterday data are also returned.</param>
        /// <param name="forecast_days">Per default, only 7 days are returned. Up to 16 days of forecast are possible.</param>
        /// <param name="forecast_hours">Similar to `forecast_days`, the number of timesteps of hourly data controlled. Instead of using the current day as a reference, the current hour time-step is used.</param>
        /// <param name="forecast_minutely_15">Similar to `forecast_days`, the number of timesteps of 15-minutely data controlled. Instead of using the current day as a reference, the current 15-minutely time-step is used.</param>
        /// <param name="past_hours">Similar to `forecast_days`, the number of timesteps of hourly data controlled. Instead of using the current day as a reference, the current hour time-step is used.</param>
        /// <param name="past_minutely_15">Similar to `forecast_days`, the number of timesteps of 15-minutely data controlled. Instead of using the current day as a reference, the current 15-minutely time-step is used.</param>
        /// <param name="start_date">The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).</param>
        /// <param name="end_date">The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).</param>
        /// <param name="start_hour">The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00).</param>
        /// <param name="end_hour">The time interval to get weather data for hourly data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00).</param>
        /// <param name="start_minutely_15">The time interval to get weather data for 15 minutely data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00).</param>
        /// <param name="end_minutely_15">The time interval to get weather data for 15 minutely data. Time must be specified as an ISO8601 date (e.g. 2022-06-30T12:00).</param>
        /// <param name="models">Manually select one or more weather models. Per default, the best suitable weather models will be combined.</param>
        /// <returns>Successfully retrieve the current forecast</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SwaggerResponse<WeatherForecastResponse>> ForecastAsync(float latitude, float longitude, float? elevation = null, IEnumerable<HourlyParameter>? hourly = null, IEnumerable<DailyParameter>? daily = null, IEnumerable<CurrentParameter>? current = null, TemperatureUnit? temperature_unit = null, string? wind_speed_unit = null, DistanceUnit? precipitation_unit = null, TimeFormat? timeformat = null, string? timezone = null, int? past_days = null, int? forecast_days = null, int? forecast_hours = null, int? forecast_minutely_15 = null, int? past_hours = null, int? past_minutely_15 = null, DateOnly? start_date = null, DateOnly? end_date = null, DateTimeOffset? start_hour = null, DateTimeOffset? end_hour = null, DateTimeOffset? start_minutely_15 = null, DateTimeOffset? end_minutely_15 = null, IEnumerable<WeatherModels>? models = null, CellSelection? cell_selection = null, string? apikey = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HourlyParameter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"temperature_2m")]
        Temperature_2m = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relative_humidity_2m")]
        Relative_humidity_2m = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dew_point_2m")]
        Dew_point_2m = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"apparent_temperature")]
        Apparent_temperature = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"pressure_msl")]
        Pressure_msl = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"surface_pressure")]
        Surface_pressure = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"cloud_cover")]
        Cloud_cover = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"cloud_cover_low")]
        Cloud_cover_low = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"cloud_cover_mid")]
        Cloud_cover_mid = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"cloud_cover_high")]
        Cloud_cover_high = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_speed_10m")]
        Wind_speed_10m = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_speed_80m")]
        Wind_speed_80m = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_speed_120m")]
        Wind_speed_120m = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_speed_180m")]
        Wind_speed_180m = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_direction_10m")]
        Wind_direction_10m = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_direction_80m")]
        Wind_direction_80m = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_direction_120m")]
        Wind_direction_120m = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_direction_180m")]
        Wind_direction_180m = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_gusts_10m")]
        Wind_gusts_10m = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"shortwave_radiation")]
        Shortwave_radiation = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"direct_radiation")]
        Direct_radiation = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"direct_normal_irradiance")]
        Direct_normal_irradiance = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"diffuse_radiation")]
        Diffuse_radiation = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"global_tilted_irradiance")]
        Global_tilted_irradiance = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"vapour_pressure_deficit")]
        Vapour_pressure_deficit = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"cape")]
        Cape = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"evapotranspiration")]
        Evapotranspiration = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"et0_fao_evapotranspiration")]
        Et0_fao_evapotranspiration = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"precipitation")]
        Precipitation = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"snowfall")]
        Snowfall = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"precipitation_probability")]
        Precipitation_probability = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"rain")]
        Rain = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"showers")]
        Showers = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"weather_code")]
        Weather_code = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"snow_depth")]
        Snow_depth = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"freezing_level_height")]
        Freezing_level_height = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"visibility")]
        Visibility = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"soil_temperature_0cm")]
        Soil_temperature_0cm = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"soil_temperature_6cm")]
        Soil_temperature_6cm = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"soil_temperature_18cm")]
        Soil_temperature_18cm = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"soil_temperature_54cm")]
        Soil_temperature_54cm = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"soil_moisture_0_to_1cm")]
        Soil_moisture_0_to_1cm = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"soil_moisture_1_to_3cm")]
        Soil_moisture_1_to_3cm = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"soil_moisture_3_to_9cm")]
        Soil_moisture_3_to_9cm = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"soil_moisture_9_to_27cm")]
        Soil_moisture_9_to_27cm = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"soil_moisture_27_to_81cm")]
        Soil_moisture_27_to_81cm = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"is_day")]
        Is_day = 46,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DailyParameter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"temperature_2m_max")]
        Temperature_2m_max = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"temperature_2m_min")]
        Temperature_2m_min = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"apparent_temperature_max")]
        Apparent_temperature_max = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"apparent_temperature_min")]
        Apparent_temperature_min = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"precipitation_sum")]
        Precipitation_sum = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"rain_sum")]
        Rain_sum = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"showers_sum")]
        Showers_sum = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"snowfall_sum")]
        Snowfall_sum = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"precipitation_hours")]
        Precipitation_hours = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"precipitation_probability_max")]
        Precipitation_probability_max = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"precipitation_probability_min")]
        Precipitation_probability_min = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"precipitation_probability_mean")]
        Precipitation_probability_mean = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"weather_code")]
        Weather_code = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"sunrise")]
        Sunrise = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"sunset")]
        Sunset = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"sunshine_duration")]
        Sunshine_duration = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"daylight_duration")]
        Daylight_duration = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_speed_10m_max")]
        Wind_speed_10m_max = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_gusts_10m_max")]
        Wind_gusts_10m_max = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_direction_10m_dominant")]
        Wind_direction_10m_dominant = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"shortwave_radiation_sum")]
        Shortwave_radiation_sum = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"et0_fao_evapotranspiration")]
        Et0_fao_evapotranspiration = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"uv_index_max")]
        Uv_index_max = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"uv_index_clear_sky_max")]
        Uv_index_clear_sky_max = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CurrentParameter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"temperature_2m")]
        Temperature_2m = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relative_humidity_2m")]
        Relative_humidity_2m = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dew_point_2m")]
        Dew_point_2m = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"apparent_temperature")]
        Apparent_temperature = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"shortwave_radiation")]
        Shortwave_radiation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"direct_radiation")]
        Direct_radiation = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"direct_normal_irradiance")]
        Direct_normal_irradiance = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"global_tilted_irradiance")]
        Global_tilted_irradiance = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"global_tilted_irradiance_instant")]
        Global_tilted_irradiance_instant = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"diffuse_radiation")]
        Diffuse_radiation = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"sunshine_duration")]
        Sunshine_duration = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"lightning_potential")]
        Lightning_potential = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"precipitation")]
        Precipitation = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"snowfall")]
        Snowfall = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"rain")]
        Rain = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"showers")]
        Showers = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"snowfall_height")]
        Snowfall_height = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"freezing_level_height")]
        Freezing_level_height = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"cape")]
        Cape = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_speed_10m")]
        Wind_speed_10m = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_speed_80m")]
        Wind_speed_80m = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_direction_10m")]
        Wind_direction_10m = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_direction_80m")]
        Wind_direction_80m = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"wind_gusts_10m")]
        Wind_gusts_10m = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"visibility")]
        Visibility = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"weather_code")]
        Weather_code = 25,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TemperatureUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"celsius")]
        Celsius = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fahrenheit")]
        Fahrenheit = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PressureUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"hPa")]
        HPa = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"kPa")]
        KPa = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DistanceUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mm")]
        Mm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cm")]
        Cm = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"m")]
        M = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"meters")]
        Meters = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"inch")]
        Inch = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimeUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"hours")]
        Hours = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"seconds")]
        Seconds = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"h")]
        H = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"s")]
        S = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"m")]
        M = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimeFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"iso8601")]
        Iso8601 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unixtime")]
        Unixtime = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WeatherModels
    {

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"best_match")]
        Best_match = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ecmwf_ifs04")]
        Ecmwf_ifs04 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ecmwf_ifs025")]
        Ecmwf_ifs025 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ecmwf_aifs025")]
        Ecmwf_aifs025 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"cma_grapes_global")]
        Cma_grapes_global = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"bom_access_global")]
        Bom_access_global = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"metno_nordic")]
        Metno_nordic = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"gfs_seamless")]
        Gfs_seamless = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"gfs_global")]
        Gfs_global = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"gfs_hrrr")]
        Gfs_hrrr = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"gfs_graphcast025")]
        Gfs_graphcast025 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"jma_seamless")]
        Jma_seamless = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"jma_msm")]
        Jma_msm = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"jma_gsm")]
        Jma_gsm = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"icon_seamless")]
        Icon_seamless = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"icon_global")]
        Icon_global = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"icon_eu")]
        Icon_eu = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"icon_d2")]
        Icon_d2 = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"gem_seamless")]
        Gem_seamless = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"gem_global")]
        Gem_global = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"gem_regional")]
        Gem_regional = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"gem_hrdps_continental")]
        Gem_hrdps_continental = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"meteofrance_seamless")]
        Meteofrance_seamless = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"meteofrance_arpege_world")]
        Meteofrance_arpege_world = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"meteofrance_arpege_europe")]
        Meteofrance_arpege_europe = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"meteofrance_arome_france")]
        Meteofrance_arome_france = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"meteofrance_arome_france_hd")]
        Meteofrance_arome_france_hd = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"arpae_cosmo_seamless")]
        Arpae_cosmo_seamless = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"arpae_cosmo_2i")]
        Arpae_cosmo_2i = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"arpae_cosmo_2i_ruc")]
        Arpae_cosmo_2i_ruc = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"arpae_cosmo_5m")]
        Arpae_cosmo_5m = 31,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CellSelection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"land")]
        Land = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sea")]
        Sea = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"nearest")]
        Nearest = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record WeatherForecastResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public WeatherForecastResponse(CurrentResponse? @current, CurrentUnitsResponse? @current_units, DailyResponse? @daily, DailyUnitsResponse? @daily_units, float @elevation, float @generationTime_ms, HourlyResponse? @hourly, HourlyUnitsResponse? @hourly_units, float @latitude, float @longitude, string @timezone, string @timezone_abbreviation, long @utc_offset_seconds)

        {

            this.Latitude = @latitude;

            this.Longitude = @longitude;

            this.Elevation = @elevation;

            this.GenerationTime_ms = @generationTime_ms;

            this.Utc_offset_seconds = @utc_offset_seconds;

            this.Timezone = @timezone;

            this.Timezone_abbreviation = @timezone_abbreviation;

            this.Hourly = @hourly;

            this.Hourly_units = @hourly_units;

            this.Daily = @daily;

            this.Daily_units = @daily_units;

            this.Current = @current;

            this.Current_units = @current_units;

        }    /// <summary>
        /// WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be a few kilometers away from the requested coordinate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public float Latitude { get; init; }

        /// <summary>
        /// WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be a few kilometers away from the requested coordinate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public float Longitude { get; init; }

        /// <summary>
        /// The elevation from a 90 meter digital elevation model. This effects which grid-cell is selected (see parameter `cell_selection`). Statistical downscaling is used to adapt weather conditions for this elevation. This elevation can also be controlled with the query parameter elevation. If &amp;elevation=nan is specified, all downscaling is disabled and the averge grid-cell elevation is used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("elevation")]
        public float Elevation { get; init; }

        /// <summary>
        /// Generation time of the weather forecast in milliseconds. This is mainly used for performance monitoring and improvements.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("generationTime_ms")]
        public float GenerationTime_ms { get; init; }

        /// <summary>
        /// Applied timezone offset from the `&amp;timezone=` parameter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("utc_offset_seconds")]
        public long Utc_offset_seconds { get; init; }

        /// <summary>
        /// Timezone identifier (e.g. Europe/Berlin)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timezone")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timezone { get; init; }

        /// <summary>
        /// Timezone abbreviation (e.g. CEST)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timezone_abbreviation")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timezone_abbreviation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("hourly")]
        public HourlyResponse? Hourly { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("hourly_units")]
        public HourlyUnitsResponse? Hourly_units { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("daily")]
        public DailyResponse? Daily { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("daily_units")]
        public DailyUnitsResponse? Daily_units { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("current")]
        public CurrentResponse? Current { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("current_units")]
        public CurrentUnitsResponse? Current_units { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static WeatherForecastResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<WeatherForecastResponse>(data, options);

        }

    }

    /// <summary>
    /// For each selected weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record HourlyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public HourlyResponse(IList<float>? @apparent_temperature, IList<float>? @cape, IList<float>? @cloud_cover, IList<float>? @cloud_cover_high, IList<float>? @cloud_cover_low, IList<float>? @cloud_cover_mid, IList<float>? @dew_point_2m, IList<float>? @diffuse_radiation, IList<float>? @direct_normal_irradiance, IList<float>? @direct_radiation, IList<float>? @et0_fao_evapotranspiration, IList<float>? @evapotranspiration, IList<float>? @freezing_level_height, IList<float>? @global_tilted_irradiance, IList<int>? @is_day, IList<float>? @precipitation, IList<float>? @precipitation_probability, IList<float>? @pressure_msl, IList<float>? @rain, IList<float>? @relative_humidity_2m, IList<float>? @shortwave_radiation, IList<float>? @showers, IList<float>? @snow_depth, IList<float>? @snowfall, IList<float>? @soil_moisture_0_to_1cm, IList<float>? @soil_moisture_1_to_3cm, IList<float>? @soil_moisture_27_to_81cm, IList<float>? @soil_moisture_3_to_9cm, IList<float>? @soil_moisture_9_to_27cm, IList<float>? @soil_temperature_0cm, IList<float>? @soil_temperature_18cm, IList<float>? @soil_temperature_54cm, IList<float>? @soil_temperature_6cm, IList<float>? @surface_pressure, IList<float>? @temperature_2m, IList<DateTimeOffset> @time, IList<float>? @vapour_pressure_deficit, IList<float>? @visibility, IList<float>? @weather_code, IList<float>? @wind_direction_10m, IList<float>? @wind_direction_120m, IList<float>? @wind_direction_180m, IList<float>? @wind_direction_80m, IList<float>? @wind_gusts_10m, IList<float>? @wind_speed_10m, IList<float>? @wind_speed_120m, IList<float>? @wind_speed_180m, IList<float>? @wind_speed_80m)

        {

            this.Time = @time;

            this.Temperature_2m = @temperature_2m;

            this.Relative_humidity_2m = @relative_humidity_2m;

            this.Dew_point_2m = @dew_point_2m;

            this.Apparent_temperature = @apparent_temperature;

            this.Pressure_msl = @pressure_msl;

            this.Surface_pressure = @surface_pressure;

            this.Cloud_cover = @cloud_cover;

            this.Cloud_cover_low = @cloud_cover_low;

            this.Cloud_cover_mid = @cloud_cover_mid;

            this.Cloud_cover_high = @cloud_cover_high;

            this.Wind_speed_10m = @wind_speed_10m;

            this.Wind_speed_80m = @wind_speed_80m;

            this.Wind_speed_120m = @wind_speed_120m;

            this.Wind_speed_180m = @wind_speed_180m;

            this.Wind_direction_10m = @wind_direction_10m;

            this.Wind_direction_80m = @wind_direction_80m;

            this.Wind_direction_120m = @wind_direction_120m;

            this.Wind_direction_180m = @wind_direction_180m;

            this.Wind_gusts_10m = @wind_gusts_10m;

            this.Shortwave_radiation = @shortwave_radiation;

            this.Direct_radiation = @direct_radiation;

            this.Direct_normal_irradiance = @direct_normal_irradiance;

            this.Diffuse_radiation = @diffuse_radiation;

            this.Global_tilted_irradiance = @global_tilted_irradiance;

            this.Vapour_pressure_deficit = @vapour_pressure_deficit;

            this.Cape = @cape;

            this.Evapotranspiration = @evapotranspiration;

            this.Et0_fao_evapotranspiration = @et0_fao_evapotranspiration;

            this.Precipitation = @precipitation;

            this.Snowfall = @snowfall;

            this.Precipitation_probability = @precipitation_probability;

            this.Rain = @rain;

            this.Showers = @showers;

            this.Weather_code = @weather_code;

            this.Snow_depth = @snow_depth;

            this.Freezing_level_height = @freezing_level_height;

            this.Visibility = @visibility;

            this.Soil_temperature_0cm = @soil_temperature_0cm;

            this.Soil_temperature_6cm = @soil_temperature_6cm;

            this.Soil_temperature_18cm = @soil_temperature_18cm;

            this.Soil_temperature_54cm = @soil_temperature_54cm;

            this.Soil_moisture_0_to_1cm = @soil_moisture_0_to_1cm;

            this.Soil_moisture_1_to_3cm = @soil_moisture_1_to_3cm;

            this.Soil_moisture_3_to_9cm = @soil_moisture_3_to_9cm;

            this.Soil_moisture_9_to_27cm = @soil_moisture_9_to_27cm;

            this.Soil_moisture_27_to_81cm = @soil_moisture_27_to_81cm;

            this.Is_day = @is_day;

        }
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required]
        public IList<DateTimeOffset> Time { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("temperature_2m")]
        public IList<float>? Temperature_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relative_humidity_2m")]
        public IList<float>? Relative_humidity_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dew_point_2m")]
        public IList<float>? Dew_point_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("apparent_temperature")]
        public IList<float>? Apparent_temperature { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pressure_msl")]
        public IList<float>? Pressure_msl { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("surface_pressure")]
        public IList<float>? Surface_pressure { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cloud_cover")]
        public IList<float>? Cloud_cover { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cloud_cover_low")]
        public IList<float>? Cloud_cover_low { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cloud_cover_mid")]
        public IList<float>? Cloud_cover_mid { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cloud_cover_high")]
        public IList<float>? Cloud_cover_high { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_10m")]
        public IList<float>? Wind_speed_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_80m")]
        public IList<float>? Wind_speed_80m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_120m")]
        public IList<float>? Wind_speed_120m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_180m")]
        public IList<float>? Wind_speed_180m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_10m")]
        public IList<float>? Wind_direction_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_80m")]
        public IList<float>? Wind_direction_80m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_120m")]
        public IList<float>? Wind_direction_120m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_180m")]
        public IList<float>? Wind_direction_180m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_gusts_10m")]
        public IList<float>? Wind_gusts_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shortwave_radiation")]
        public IList<float>? Shortwave_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("direct_radiation")]
        public IList<float>? Direct_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("direct_normal_irradiance")]
        public IList<float>? Direct_normal_irradiance { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("diffuse_radiation")]
        public IList<float>? Diffuse_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("global_tilted_irradiance")]
        public IList<float>? Global_tilted_irradiance { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("vapour_pressure_deficit")]
        public IList<float>? Vapour_pressure_deficit { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cape")]
        public IList<float>? Cape { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("evapotranspiration")]
        public IList<float>? Evapotranspiration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("et0_fao_evapotranspiration")]
        public IList<float>? Et0_fao_evapotranspiration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation")]
        public IList<float>? Precipitation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snowfall")]
        public IList<float>? Snowfall { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_probability")]
        public IList<float>? Precipitation_probability { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("rain")]
        public IList<float>? Rain { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("showers")]
        public IList<float>? Showers { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("weather_code")]
        public IList<float>? Weather_code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snow_depth")]
        public IList<float>? Snow_depth { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("freezing_level_height")]
        public IList<float>? Freezing_level_height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("visibility")]
        public IList<float>? Visibility { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_temperature_0cm")]
        public IList<float>? Soil_temperature_0cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_temperature_6cm")]
        public IList<float>? Soil_temperature_6cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_temperature_18cm")]
        public IList<float>? Soil_temperature_18cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_temperature_54cm")]
        public IList<float>? Soil_temperature_54cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_0_to_1cm")]
        public IList<float>? Soil_moisture_0_to_1cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_1_to_3cm")]
        public IList<float>? Soil_moisture_1_to_3cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_3_to_9cm")]
        public IList<float>? Soil_moisture_3_to_9cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_9_to_27cm")]
        public IList<float>? Soil_moisture_9_to_27cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_27_to_81cm")]
        public IList<float>? Soil_moisture_27_to_81cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("is_day")]
        public IList<int>? Is_day { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static HourlyResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<HourlyResponse>(data, options);

        }

    }

    /// <summary>
    /// For each selected weather variable, the unit will be listed here.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record HourlyUnitsResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public HourlyUnitsResponse(string? @apparent_temperature, string? @cape, string? @cloud_cover, string? @cloud_cover_high, string? @cloud_cover_low, string? @cloud_cover_mid, string? @dew_point_2m, string? @diffuse_radiation, string? @direct_normal_irradiance, string? @direct_radiation, DistanceUnit? @et0_fao_evapotranspiration, DistanceUnit? @evapotranspiration, DistanceUnit? @freezing_level_height, string? @global_tilted_irradiance, string? @is_day, DistanceUnit? @precipitation, string? @precipitation_probability, PressureUnit? @pressure_msl, DistanceUnit? @rain, string? @relative_humidity_2m, string? @shortwave_radiation, DistanceUnit? @showers, DistanceUnit? @snow_depth, DistanceUnit? @snowfall, string? @soil_moisture_0_to_1cm, string? @soil_moisture_1_to_3cm, string? @soil_moisture_27_to_81cm, string? @soil_moisture_3_to_9cm, string? @soil_moisture_9_to_27cm, string? @soil_temperature_0cm, string? @soil_temperature_18cm, string? @soil_temperature_54cm, string? @soil_temperature_6cm, PressureUnit? @surface_pressure, string? @temperature_2m, TimeFormat @time, PressureUnit? @vapour_pressure_deficit, DistanceUnit? @visibility, string? @weather_code, string? @wind_direction_10m, string? @wind_direction_120m, string? @wind_direction_180m, string? @wind_direction_80m, string? @wind_gusts_10m, string? @wind_speed_10m, string? @wind_speed_120m, string? @wind_speed_180m, string? @wind_speed_80m)

        {

            this.Time = @time;

            this.Temperature_2m = @temperature_2m;

            this.Relative_humidity_2m = @relative_humidity_2m;

            this.Dew_point_2m = @dew_point_2m;

            this.Apparent_temperature = @apparent_temperature;

            this.Pressure_msl = @pressure_msl;

            this.Surface_pressure = @surface_pressure;

            this.Cloud_cover = @cloud_cover;

            this.Cloud_cover_low = @cloud_cover_low;

            this.Cloud_cover_mid = @cloud_cover_mid;

            this.Cloud_cover_high = @cloud_cover_high;

            this.Wind_speed_10m = @wind_speed_10m;

            this.Wind_speed_80m = @wind_speed_80m;

            this.Wind_speed_120m = @wind_speed_120m;

            this.Wind_speed_180m = @wind_speed_180m;

            this.Wind_direction_10m = @wind_direction_10m;

            this.Wind_direction_80m = @wind_direction_80m;

            this.Wind_direction_120m = @wind_direction_120m;

            this.Wind_direction_180m = @wind_direction_180m;

            this.Wind_gusts_10m = @wind_gusts_10m;

            this.Shortwave_radiation = @shortwave_radiation;

            this.Direct_radiation = @direct_radiation;

            this.Direct_normal_irradiance = @direct_normal_irradiance;

            this.Diffuse_radiation = @diffuse_radiation;

            this.Global_tilted_irradiance = @global_tilted_irradiance;

            this.Vapour_pressure_deficit = @vapour_pressure_deficit;

            this.Cape = @cape;

            this.Evapotranspiration = @evapotranspiration;

            this.Et0_fao_evapotranspiration = @et0_fao_evapotranspiration;

            this.Precipitation = @precipitation;

            this.Snowfall = @snowfall;

            this.Precipitation_probability = @precipitation_probability;

            this.Rain = @rain;

            this.Showers = @showers;

            this.Weather_code = @weather_code;

            this.Snow_depth = @snow_depth;

            this.Freezing_level_height = @freezing_level_height;

            this.Visibility = @visibility;

            this.Soil_temperature_0cm = @soil_temperature_0cm;

            this.Soil_temperature_6cm = @soil_temperature_6cm;

            this.Soil_temperature_18cm = @soil_temperature_18cm;

            this.Soil_temperature_54cm = @soil_temperature_54cm;

            this.Soil_moisture_0_to_1cm = @soil_moisture_0_to_1cm;

            this.Soil_moisture_1_to_3cm = @soil_moisture_1_to_3cm;

            this.Soil_moisture_3_to_9cm = @soil_moisture_3_to_9cm;

            this.Soil_moisture_9_to_27cm = @soil_moisture_9_to_27cm;

            this.Soil_moisture_27_to_81cm = @soil_moisture_27_to_81cm;

            this.Is_day = @is_day;

        }
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TimeFormat Time { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("temperature_2m")]
        public string? Temperature_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relative_humidity_2m")]
        public string? Relative_humidity_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dew_point_2m")]
        public string? Dew_point_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("apparent_temperature")]
        public string? Apparent_temperature { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("pressure_msl")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PressureUnit? Pressure_msl { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("surface_pressure")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PressureUnit? Surface_pressure { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cloud_cover")]
        public string? Cloud_cover { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cloud_cover_low")]
        public string? Cloud_cover_low { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cloud_cover_mid")]
        public string? Cloud_cover_mid { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cloud_cover_high")]
        public string? Cloud_cover_high { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_10m")]
        public string? Wind_speed_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_80m")]
        public string? Wind_speed_80m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_120m")]
        public string? Wind_speed_120m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_180m")]
        public string? Wind_speed_180m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_10m")]
        public string? Wind_direction_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_80m")]
        public string? Wind_direction_80m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_120m")]
        public string? Wind_direction_120m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_180m")]
        public string? Wind_direction_180m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_gusts_10m")]
        public string? Wind_gusts_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shortwave_radiation")]
        public string? Shortwave_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("direct_radiation")]
        public string? Direct_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("direct_normal_irradiance")]
        public string? Direct_normal_irradiance { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("diffuse_radiation")]
        public string? Diffuse_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("global_tilted_irradiance")]
        public string? Global_tilted_irradiance { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("vapour_pressure_deficit")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PressureUnit? Vapour_pressure_deficit { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cape")]
        public string? Cape { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("evapotranspiration")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Evapotranspiration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("et0_fao_evapotranspiration")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Et0_fao_evapotranspiration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Precipitation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snowfall")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Snowfall { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_probability")]
        public string? Precipitation_probability { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("rain")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Rain { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("showers")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Showers { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("weather_code")]
        public string? Weather_code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snow_depth")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Snow_depth { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("freezing_level_height")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Freezing_level_height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("visibility")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Visibility { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_temperature_0cm")]
        public string? Soil_temperature_0cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_temperature_6cm")]
        public string? Soil_temperature_6cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_temperature_18cm")]
        public string? Soil_temperature_18cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_temperature_54cm")]
        public string? Soil_temperature_54cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_0_to_1cm")]
        public string? Soil_moisture_0_to_1cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_1_to_3cm")]
        public string? Soil_moisture_1_to_3cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_3_to_9cm")]
        public string? Soil_moisture_3_to_9cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_9_to_27cm")]
        public string? Soil_moisture_9_to_27cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("soil_moisture_27_to_81cm")]
        public string? Soil_moisture_27_to_81cm { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("is_day")]
        public string? Is_day { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static HourlyUnitsResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<HourlyUnitsResponse>(data, options);

        }

    }

    /// <summary>
    /// For each selected daily weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DailyResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public DailyResponse(IList<float>? @apparent_temperature_max, IList<float>? @apparent_temperature_min, IList<float>? @daylight_duration, IList<float>? @et0_fao_evapotranspiration, IList<float>? @precipitation_hours, IList<float>? @precipitation_probability_max, IList<float>? @precipitation_probability_mean, IList<float>? @precipitation_probability_min, IList<float>? @precipitation_sum, IList<float>? @rain_sum, IList<float>? @shortwave_radiation_sum, IList<float>? @showers_sum, IList<float>? @snowfall_sum, IList<DateTimeOffset>? @sunrise, IList<DateTimeOffset>? @sunset, IList<float>? @sunshine_duration, IList<float>? @temperature_2m_max, IList<float>? @temperature_2m_min, IList<DateOnly> @time, IList<float>? @uv_index_clear_sky_max, IList<float>? @uv_index_max, IList<WmoWeatherCode>? @weather_code, IList<float>? @wind_direction_10m_dominant, IList<float>? @wind_gusts_10m_max, IList<float>? @wind_speed_10m_max)

        {

            this.Time = @time;

            this.Temperature_2m_max = @temperature_2m_max;

            this.Temperature_2m_min = @temperature_2m_min;

            this.Apparent_temperature_max = @apparent_temperature_max;

            this.Apparent_temperature_min = @apparent_temperature_min;

            this.Precipitation_sum = @precipitation_sum;

            this.Rain_sum = @rain_sum;

            this.Showers_sum = @showers_sum;

            this.Snowfall_sum = @snowfall_sum;

            this.Precipitation_hours = @precipitation_hours;

            this.Precipitation_probability_max = @precipitation_probability_max;

            this.Precipitation_probability_min = @precipitation_probability_min;

            this.Precipitation_probability_mean = @precipitation_probability_mean;

            this.Weather_code = @weather_code;

            this.Sunrise = @sunrise;

            this.Sunset = @sunset;

            this.Sunshine_duration = @sunshine_duration;

            this.Daylight_duration = @daylight_duration;

            this.Wind_speed_10m_max = @wind_speed_10m_max;

            this.Wind_gusts_10m_max = @wind_gusts_10m_max;

            this.Wind_direction_10m_dominant = @wind_direction_10m_dominant;

            this.Shortwave_radiation_sum = @shortwave_radiation_sum;

            this.Et0_fao_evapotranspiration = @et0_fao_evapotranspiration;

            this.Uv_index_max = @uv_index_max;

            this.Uv_index_clear_sky_max = @uv_index_clear_sky_max;

        }
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required]
        public IList<DateOnly> Time { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("temperature_2m_max")]
        public IList<float>? Temperature_2m_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("temperature_2m_min")]
        public IList<float>? Temperature_2m_min { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("apparent_temperature_max")]
        public IList<float>? Apparent_temperature_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("apparent_temperature_min")]
        public IList<float>? Apparent_temperature_min { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_sum")]
        public IList<float>? Precipitation_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("rain_sum")]
        public IList<float>? Rain_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("showers_sum")]
        public IList<float>? Showers_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snowfall_sum")]
        public IList<float>? Snowfall_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_hours")]
        public IList<float>? Precipitation_hours { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_probability_max")]
        public IList<float>? Precipitation_probability_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_probability_min")]
        public IList<float>? Precipitation_probability_min { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_probability_mean")]
        public IList<float>? Precipitation_probability_mean { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("weather_code")]
        public IList<WmoWeatherCode>? Weather_code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sunrise")]
        public IList<DateTimeOffset>? Sunrise { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sunset")]
        public IList<DateTimeOffset>? Sunset { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sunshine_duration")]
        public IList<float>? Sunshine_duration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("daylight_duration")]
        public IList<float>? Daylight_duration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_10m_max")]
        public IList<float>? Wind_speed_10m_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_gusts_10m_max")]
        public IList<float>? Wind_gusts_10m_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_10m_dominant")]
        public IList<float>? Wind_direction_10m_dominant { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shortwave_radiation_sum")]
        public IList<float>? Shortwave_radiation_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("et0_fao_evapotranspiration")]
        public IList<float>? Et0_fao_evapotranspiration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("uv_index_max")]
        public IList<float>? Uv_index_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("uv_index_clear_sky_max")]
        public IList<float>? Uv_index_clear_sky_max { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DailyResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<DailyResponse>(data, options);

        }

    }

    /// <summary>
    /// For each selected daily weather variable, the unit will be listed here.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DailyUnitsResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public DailyUnitsResponse(string? @apparent_temperature_max, string? @apparent_temperature_min, TimeUnit? @daylight_duration, DistanceUnit? @et0_fao_evapotranspiration, TimeUnit? @precipitation_hours, string? @precipitation_probability_max, string? @precipitation_probability_mean, string? @precipitation_probability_min, DistanceUnit? @precipitation_sum, DistanceUnit? @rain_sum, string? @shortwave_radiation_sum, DistanceUnit? @showers_sum, DistanceUnit? @snowfall_sum, TimeFormat? @sunrise, TimeFormat? @sunset, TimeUnit? @sunshine_duration, string? @temperature_2m_max, string? @temperature_2m_min, TimeFormat @time, string? @uv_index_clear_sky_max, string? @uv_index_max, string? @weather_code, string? @wind_direction_10m_dominant, string? @wind_gusts_10m_max, string? @wind_speed_10m_max)

        {

            this.Time = @time;

            this.Temperature_2m_max = @temperature_2m_max;

            this.Temperature_2m_min = @temperature_2m_min;

            this.Apparent_temperature_max = @apparent_temperature_max;

            this.Apparent_temperature_min = @apparent_temperature_min;

            this.Precipitation_sum = @precipitation_sum;

            this.Rain_sum = @rain_sum;

            this.Showers_sum = @showers_sum;

            this.Snowfall_sum = @snowfall_sum;

            this.Precipitation_hours = @precipitation_hours;

            this.Precipitation_probability_max = @precipitation_probability_max;

            this.Precipitation_probability_min = @precipitation_probability_min;

            this.Precipitation_probability_mean = @precipitation_probability_mean;

            this.Weather_code = @weather_code;

            this.Sunrise = @sunrise;

            this.Sunset = @sunset;

            this.Sunshine_duration = @sunshine_duration;

            this.Daylight_duration = @daylight_duration;

            this.Wind_speed_10m_max = @wind_speed_10m_max;

            this.Wind_gusts_10m_max = @wind_gusts_10m_max;

            this.Wind_direction_10m_dominant = @wind_direction_10m_dominant;

            this.Shortwave_radiation_sum = @shortwave_radiation_sum;

            this.Et0_fao_evapotranspiration = @et0_fao_evapotranspiration;

            this.Uv_index_max = @uv_index_max;

            this.Uv_index_clear_sky_max = @uv_index_clear_sky_max;

        }
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TimeFormat Time { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("temperature_2m_max")]
        public string? Temperature_2m_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("temperature_2m_min")]
        public string? Temperature_2m_min { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("apparent_temperature_max")]
        public string? Apparent_temperature_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("apparent_temperature_min")]
        public string? Apparent_temperature_min { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_sum")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Precipitation_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("rain_sum")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Rain_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("showers_sum")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Showers_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snowfall_sum")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Snowfall_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_hours")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TimeUnit? Precipitation_hours { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_probability_max")]
        public string? Precipitation_probability_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_probability_min")]
        public string? Precipitation_probability_min { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation_probability_mean")]
        public string? Precipitation_probability_mean { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("weather_code")]
        public string? Weather_code { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sunrise")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TimeFormat? Sunrise { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sunset")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TimeFormat? Sunset { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sunshine_duration")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TimeUnit? Sunshine_duration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("daylight_duration")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TimeUnit? Daylight_duration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_10m_max")]
        public string? Wind_speed_10m_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_gusts_10m_max")]
        public string? Wind_gusts_10m_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_10m_dominant")]
        public string? Wind_direction_10m_dominant { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shortwave_radiation_sum")]
        public string? Shortwave_radiation_sum { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("et0_fao_evapotranspiration")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Et0_fao_evapotranspiration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("uv_index_max")]
        public string? Uv_index_max { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("uv_index_clear_sky_max")]
        public string? Uv_index_clear_sky_max { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DailyUnitsResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<DailyUnitsResponse>(data, options);

        }

    }

    /// <summary>
    /// For each selected daily weather variable, data will be returned as a floating point array. Additionally a time array will be returned with ISO8601 timestamps.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CurrentResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CurrentResponse(float? @apparent_temperature, float? @cape, float? @dew_point_2m, float? @diffuse_radiation, float? @direct_normal_irradiance, float? @direct_radiation, float? @freezing_level_height, float? @global_tilted_irradiance, float? @global_tilted_irradiance_instant, float? @lightning_potential, float? @precipitation, float? @rain, float? @relative_humidity_2m, float? @shortwave_radiation, float? @showers, float? @snowfall, float? @snowfall_height, float? @sunshine_duration, float? @temperature_2m, DateTimeOffset @time, float? @visibility, WmoWeatherCode? @weather_code, float? @wind_direction_10m, float? @wind_direction_80m, float? @wind_gusts_10m, float? @wind_speed_10m, float? @wind_speed_80m)

        {

            this.Time = @time;

            this.Temperature_2m = @temperature_2m;

            this.Relative_humidity_2m = @relative_humidity_2m;

            this.Dew_point_2m = @dew_point_2m;

            this.Apparent_temperature = @apparent_temperature;

            this.Shortwave_radiation = @shortwave_radiation;

            this.Direct_radiation = @direct_radiation;

            this.Direct_normal_irradiance = @direct_normal_irradiance;

            this.Global_tilted_irradiance = @global_tilted_irradiance;

            this.Global_tilted_irradiance_instant = @global_tilted_irradiance_instant;

            this.Diffuse_radiation = @diffuse_radiation;

            this.Sunshine_duration = @sunshine_duration;

            this.Lightning_potential = @lightning_potential;

            this.Precipitation = @precipitation;

            this.Snowfall = @snowfall;

            this.Rain = @rain;

            this.Showers = @showers;

            this.Snowfall_height = @snowfall_height;

            this.Freezing_level_height = @freezing_level_height;

            this.Cape = @cape;

            this.Wind_speed_10m = @wind_speed_10m;

            this.Wind_speed_80m = @wind_speed_80m;

            this.Wind_direction_10m = @wind_direction_10m;

            this.Wind_direction_80m = @wind_direction_80m;

            this.Wind_gusts_10m = @wind_gusts_10m;

            this.Visibility = @visibility;

            this.Weather_code = @weather_code;

        }
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateTimeOffset Time { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("temperature_2m")]
        public float? Temperature_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relative_humidity_2m")]
        public float? Relative_humidity_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dew_point_2m")]
        public float? Dew_point_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("apparent_temperature")]
        public float? Apparent_temperature { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shortwave_radiation")]
        public float? Shortwave_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("direct_radiation")]
        public float? Direct_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("direct_normal_irradiance")]
        public float? Direct_normal_irradiance { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("global_tilted_irradiance")]
        public float? Global_tilted_irradiance { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("global_tilted_irradiance_instant")]
        public float? Global_tilted_irradiance_instant { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("diffuse_radiation")]
        public float? Diffuse_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sunshine_duration")]
        public float? Sunshine_duration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lightning_potential")]
        public float? Lightning_potential { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation")]
        public float? Precipitation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snowfall")]
        public float? Snowfall { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("rain")]
        public float? Rain { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("showers")]
        public float? Showers { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snowfall_height")]
        public float? Snowfall_height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("freezing_level_height")]
        public float? Freezing_level_height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cape")]
        public float? Cape { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_10m")]
        public float? Wind_speed_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_80m")]
        public float? Wind_speed_80m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_10m")]
        public float? Wind_direction_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_80m")]
        public float? Wind_direction_80m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_gusts_10m")]
        public float? Wind_gusts_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("visibility")]
        public float? Visibility { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("weather_code")]
        public WmoWeatherCode? Weather_code { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CurrentResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CurrentResponse>(data, options);

        }

    }

    /// <summary>
    /// For each selected current weather variable, the unit will be listed here.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CurrentUnitsResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CurrentUnitsResponse(string? @apparent_temperature, string? @cape, string? @dew_point_2m, string? @diffuse_radiation, string? @direct_normal_irradiance, string? @direct_radiation, DistanceUnit? @freezing_level_height, string? @global_tilted_irradiance, string? @global_tilted_irradiance_instant, string? @lightning_potential, DistanceUnit? @precipitation, DistanceUnit? @rain, string? @relative_humidity_2m, string? @shortwave_radiation, DistanceUnit? @showers, DistanceUnit? @snowfall, DistanceUnit? @snowfall_height, TimeUnit? @sunshine_duration, string? @temperature_2m, TimeFormat @time, DistanceUnit? @visibility, string? @weather_code, string? @wind_direction_10m, string? @wind_direction_80m, string? @wind_gusts_10m, string? @wind_speed_10m, string? @wind_speed_80m)

        {

            this.Time = @time;

            this.Temperature_2m = @temperature_2m;

            this.Relative_humidity_2m = @relative_humidity_2m;

            this.Dew_point_2m = @dew_point_2m;

            this.Apparent_temperature = @apparent_temperature;

            this.Shortwave_radiation = @shortwave_radiation;

            this.Direct_radiation = @direct_radiation;

            this.Direct_normal_irradiance = @direct_normal_irradiance;

            this.Global_tilted_irradiance = @global_tilted_irradiance;

            this.Global_tilted_irradiance_instant = @global_tilted_irradiance_instant;

            this.Diffuse_radiation = @diffuse_radiation;

            this.Sunshine_duration = @sunshine_duration;

            this.Lightning_potential = @lightning_potential;

            this.Precipitation = @precipitation;

            this.Snowfall = @snowfall;

            this.Rain = @rain;

            this.Showers = @showers;

            this.Snowfall_height = @snowfall_height;

            this.Freezing_level_height = @freezing_level_height;

            this.Cape = @cape;

            this.Wind_speed_10m = @wind_speed_10m;

            this.Wind_speed_80m = @wind_speed_80m;

            this.Wind_direction_10m = @wind_direction_10m;

            this.Wind_direction_80m = @wind_direction_80m;

            this.Wind_gusts_10m = @wind_gusts_10m;

            this.Visibility = @visibility;

            this.Weather_code = @weather_code;

        }
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TimeFormat Time { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("temperature_2m")]
        public string? Temperature_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("relative_humidity_2m")]
        public string? Relative_humidity_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("dew_point_2m")]
        public string? Dew_point_2m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("apparent_temperature")]
        public string? Apparent_temperature { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("shortwave_radiation")]
        public string? Shortwave_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("direct_radiation")]
        public string? Direct_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("direct_normal_irradiance")]
        public string? Direct_normal_irradiance { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("global_tilted_irradiance")]
        public string? Global_tilted_irradiance { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("global_tilted_irradiance_instant")]
        public string? Global_tilted_irradiance_instant { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("diffuse_radiation")]
        public string? Diffuse_radiation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("sunshine_duration")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TimeUnit? Sunshine_duration { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("lightning_potential")]
        public string? Lightning_potential { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("precipitation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Precipitation { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snowfall")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Snowfall { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("rain")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Rain { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("showers")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Showers { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("snowfall_height")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Snowfall_height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("freezing_level_height")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Freezing_level_height { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("cape")]
        public string? Cape { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_10m")]
        public string? Wind_speed_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_speed_80m")]
        public string? Wind_speed_80m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_10m")]
        public string? Wind_direction_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_direction_80m")]
        public string? Wind_direction_80m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("wind_gusts_10m")]
        public string? Wind_gusts_10m { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("visibility")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DistanceUnit? Visibility { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("weather_code")]
        public string? Weather_code { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CurrentUnitsResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CurrentUnitsResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ErrorResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ErrorResponse(bool @error, string @reason)

        {

            this.Error = @error;

            this.Reason = @reason;

        }
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public bool Error { get; init; }

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reason { get; init; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ErrorResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ErrorResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WmoWeatherCode : long
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _45 = 45,

        _48 = 48,

        _51 = 51,

        _53 = 53,

        _55 = 55,

        _56 = 56,

        _57 = 57,

        _61 = 61,

        _63 = 63,

        _65 = 65,

        _66 = 66,

        _67 = 67,

        _71 = 71,

        _73 = 73,

        _75 = 75,

        _77 = 77,

        _80 = 80,

        _81 = 81,

        _82 = 82,

        _85 = 85,

        _86 = 86,

        _95 = 95,

        _96 = 96,

        _99 = 99,

    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerResponse<TResult> : SwaggerResponse
    {
        public TResult Result { get; private set; }

        public SwaggerResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625